{"version":3,"sources":["assets/mocks/wizard-page-5-example.ts","components/wizard/sections/WizardSectionE/WizardSectionE.tsx"],"names":["example","key","items","label","controlType","SectionWhichCanBeMultiplied","index","useWizardContext","setSectionE","sectionE","SECTION_KEY","ITEM_KEY","section","useDynamicForm","renderForm","formState","setFormState","useEffect","existing","Object","keys","length","className","WizardSectionE","useState","numberOfSections","setNumberOfSections","ComponentsHeader","Header","d3","theme","Array","map","_","i","onClick","x","to"],"mappings":"mPAEaA,EAAgC,CAC3C,CACEC,IAAK,YACLC,MAAO,CACL,CACED,IAAK,OACLE,MAAO,OACPC,YAAa,W,+CCsCfC,EAA2D,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAC5CC,cAA1BC,EADsE,EACtEA,YAAaC,EADyD,EACzDA,SAEfC,EAAmB,UAAMV,EAAQ,GAAGC,IAAjB,YAAwBK,GAC3CK,EAAgB,UAAOX,EAAQ,GAAGE,MAA4B,GAAGD,IAAjD,YAAwDK,GAExEM,EAA2B,2BAC5BZ,EAAQ,IADoB,IAE/BC,IAAKS,EACLR,MAAO,CAAC,2BAEAF,EAAQ,GAAGE,MAA4B,IAFxC,IAGHD,IAAKU,EACLR,MAAM,GAAD,OAAMH,EAAQ,GAAGE,MAA4B,GAAGC,MAAhD,YAAyDG,QAbU,EAkBhCO,yBAAe,CAACD,IAlBgB,mBAkBvEE,EAlBuE,KAkB3DC,EAlB2D,KAkBhDC,EAlBgD,KA+C9E,OA3BAC,qBAAU,WACRT,GAAY,SAACU,GACX,OAAO,2BACFA,GADL,kBAEGR,EAAcK,EAAUL,IAAeK,EAAUL,GAAaC,IAAkB,UAGpF,CAACI,IAEJE,qBAAU,WACgB,kBAAbR,GAAyBU,OAAOC,KAAKX,GAAUY,QACnB,kBAA1BZ,EAASC,IAA8BD,EAASC,GAAwBW,QACjFL,EAAa,eAAGN,EAAJ,eAAqBC,EAAWF,EAASC,QAaxD,IAEI,qBAAKY,UAAU,YAAf,SAA4BR,OAGtBS,EAxFkB,WAAO,IAAD,EACWC,mBAAiB,GAD5B,mBAC9BC,EAD8B,KACZC,EADY,KAE/BC,EAAmB,kBAAM,cAACC,EAAA,EAAD,CAAQC,GAAG,qBAAqBC,MAAM,aAGrE,OACE,qCACE,cAACH,EAAD,IAEA,sBAAKL,UAAU,kBAAf,UACE,qBAAKA,UAAU,YAAf,SACGG,EAAmB,GAClB,YAAI,IAAIM,MAAMN,IAAmBO,KAAI,SAACC,EAAcC,GAAf,OACnC,cAAC,EAAD,CAAqC5B,MAAO4B,EAAI,GAAdA,QAIxC,sBAAKZ,UAAU,4CAAf,UACE,cAAC,IAAD,CAAQQ,MAAM,OAAOK,QAAS,kBAAMT,GAAoB,SAACU,GAAD,OAAOA,EAAI,MAAnE,iBAGA,cAAC,IAAD,CAAQN,MAAM,OAAOK,QAAS,kBAAMT,GAAoB,SAACU,GAAD,OAAOA,EAAI,MAAnE,uBAKF,qBAAKd,UAAU,YAAf,SACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,oBAAf,SACE,cAAC,OAAD,CAAMe,GAAG,IAAT","file":"static/js/5.f14f3563.chunk.js","sourcesContent":["import { DynamicFormSection } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nexport const example: DynamicFormSection[] = [\n  {\n    key: \"section-5\",\n    items: [\n      {\n        key: \"item\",\n        label: \"Item\",\n        controlType: \"Text\"\n      }\n    ]\n  }\n];\n","import React, { useEffect, useState } from \"react\";\nimport Header from \"../../../Header\";\nimport { example } from \"../../../../assets/mocks/wizard-page-5-example\";\nimport { useDynamicForm, DynamicFormSection, DynamicFormItem } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { useWizardContext } from \"../../../../providers/WizardProvider\";\nimport { Link } from \"react-router-dom\";\nimport \"./WizardSectionE.scss\";\nimport { Button } from \"@sebgroup/react-components\";\n\nconst WizardSectionE: React.FC = () => {\n  const [numberOfSections, setNumberOfSections] = useState<number>(1);\n  const ComponentsHeader = () => <Header d3=\"Wizard | Section E\" theme=\"success\" />;\n\n  // RENDER =+=+=+=+=+=+=+=+=+=+=+=\n  return (\n    <>\n      <ComponentsHeader />\n\n      <div className=\"container-fluid\">\n        <div className=\"card mb-3\">\n          {numberOfSections > 0 &&\n            [...new Array(numberOfSections)].map((_: undefined, i) => (\n              <SectionWhichCanBeMultiplied key={i} index={i + 1} />\n            ))}\n        </div>\n\n        <div className=\"d-flex justify-content-between my-3 w-100\">\n          <Button theme=\"link\" onClick={() => setNumberOfSections((x) => x + 1)}>\n            Add\n          </Button>\n          <Button theme=\"link\" onClick={() => setNumberOfSections((x) => x - 1)}>\n            Remove\n          </Button>\n        </div>\n\n        <div className=\"card mb-3\">\n          <div className=\"card-footer\">\n            <div className=\"d-flex my-3 w-100\">\n              <Link to=\"d\">Back</Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst SectionWhichCanBeMultiplied: React.FC<{ index: number }> = ({ index }) => {\n  const { setSectionE, sectionE } = useWizardContext();\n\n  const SECTION_KEY: string = `${example[0].key}-${index}`;\n  const ITEM_KEY: string = `${(example[0].items as DynamicFormItem[])[0].key}-${index}`;\n\n  const section: DynamicFormSection = {\n    ...example[0],\n    key: SECTION_KEY,\n    items: [\n      {\n        ...(example[0].items as DynamicFormItem[])[0],\n        key: ITEM_KEY,\n        label: `${(example[0].items as DynamicFormItem[])[0].label}-${index}`\n      }\n    ]\n  };\n\n  const [renderForm, formState, setFormState] = useDynamicForm([section]);\n\n  useEffect(() => {\n    setSectionE((existing) => {\n      return {\n        ...existing,\n        [SECTION_KEY]: formState[SECTION_KEY] ? formState[SECTION_KEY][ITEM_KEY] || \"\" : \"\"\n      };\n    });\n  }, [formState]);\n\n  useEffect(() => {\n    if (typeof sectionE === \"object\" && Object.keys(sectionE).length) {\n      if (typeof sectionE[SECTION_KEY] === \"string\" && (sectionE[SECTION_KEY] as string).length) {\n        setFormState({ [SECTION_KEY]: { [ITEM_KEY]: sectionE[SECTION_KEY] } });\n      }\n    }\n\n    // NOTE: Uncomment this is you wish to reset the state when the item is removed\n    // return () => {\n    //   setSectionE((existing) => {\n    //     return {\n    //       ...existing,\n    //       [SECTION_KEY]: formState[SECTION_KEY] ? formState[SECTION_KEY][ITEM_KEY] || \"\" : \"\"\n    //     };\n    //   });\n    // };\n  }, []);\n\n  return <div className=\"card-body\">{renderForm()}</div>;\n};\n\nexport default WizardSectionE;\n"],"sourceRoot":""}