{"version":3,"sources":["../../../src/capitalize/capitalize.ts","assets/mocks/wizard-page-4-example.ts","components/wizard/sections/WizardSectionD.tsx"],"names":["capitalize","str","charAt","toUpperCase","substr","length","makeOptions","locale","format","Intl","DateTimeFormat","month","months","testDate","Date","UTC","push","getMonthsForLocale","map","i","key","value","label","description","additionalProps","disabled","example","commonExtraProps","className","controlType","item","placeholder","options","e","wrapperProps","style","width","order","title","items","wrappingElement","makeSections","WizardSectionD","ComponentsHeader","Header","d3","theme","useWizardContext","setSectionD","sectionD","sections","useDynamicForm","renderForm","formState","setFormState","useEffect","Object","keys","to"],"mappings":"sIAKgBA,EAAWC,GACvB,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,OAAO,EAAGH,EAAII,OAAS,G,4HCY9DC,EAAc,SAACC,GAGnB,MAFsB,CAAI,YAAJ,mBAXG,SAACA,GAG1B,IAFA,IAAIC,EAAS,IAAIC,KAAKC,eAAeH,EAAQ,CAAEI,MAAO,SAClDC,EAAS,GACJD,EAAQ,EAAGA,EAAQ,GAAIA,IAAS,CACvC,IAAIE,EAAW,IAAIC,KAAKA,KAAKC,IAAI,IAAMJ,EAAO,EAAG,EAAG,EAAG,IACvDC,EAAOI,KAAKR,EAAOA,OAAOK,IAE5B,OAAOD,EAIkCK,CAAmBV,KAE9CW,KAAI,SAACP,EAAeQ,GAWhC,MAVkC,CAChCC,IAAKT,EACLU,MAAOV,EACPW,MAAOtB,YAAWW,GAClBY,YAAY,GAAD,OAAKZ,EAAL,kBACXa,gBAAiB,CACfC,SAAoB,aAAVd,QAwDLe,EAAU,SAACnB,GAAD,OAhDF,SAACA,GACpB,IAEMoB,EAAyC,CAC7CC,UAAW,iBAGb,MANiC,CAAC,QAAS,WAAY,UAM1CV,KAAI,SAACW,EAA8BV,GAC9C,IAAMW,EAAwB,CAC5BD,cACAT,IAAI,GAAD,OAAKS,EAAL,YAAoBV,EAApB,SACHG,MAAM,GAAD,OAAKO,EAAL,kBACLN,YAAY,GAAD,OAAKM,EAAL,wBACXE,YAAa,sBACbP,gBACkB,UAAhBK,EACI,CACED,UAAW,wCAEb,GACNI,QAAS,YAAI1B,EAAYC,IAASW,KAAI,SAACe,GACrC,MAAuB,UAAhBJ,EAAA,2BAEEI,GAFF,IAGDT,gBAAgB,2BACVS,EAAET,iBAAmB,IADZ,IAEbU,aAAc,CACZC,MAAO,CACLC,MAAO,UAKfH,MAIR,MAAO,CACLb,IAAI,GAAD,OAAKS,EAAL,YAAoBV,EAApB,YACHkB,MAAOlB,EACPmB,MAAM,GAAD,OAAKT,EAAL,YACLU,MAAO,CAACT,GACRU,gBAAiB,UACjBhB,gBAAgB,eAAMG,OAKqCc,CAAalC,I,+BCpC/DmC,UAxCkB,WAC/B,IAAMC,EAAmB,kBAAM,cAACC,EAAA,EAAD,CAAQC,GAAG,qBAAqBC,MAAM,aADhC,EAEHC,cAA1BC,EAF6B,EAE7BA,YAAaC,EAFgB,EAEhBA,SAEfC,EAAiCxB,EAAQ,MAJV,EAMSyB,yBAAeD,GANxB,mBAM9BE,EAN8B,KAMlBC,EANkB,KAMPC,EANO,KAmBrC,OAXAC,qBAAU,WACRP,EAAY,eAAMK,GAAaA,MAC9B,CAACA,IAEJE,qBAAU,WACgB,kBAAbN,GAAyBO,OAAOC,KAAKR,GAAU5C,QACxDiD,EAAaL,KAEd,IAID,qCACE,cAACN,EAAD,IAEA,sBAAKf,UAAU,kBAAf,UACE,0HACA,mBAAGA,UAAU,4BAAb,0CACA,mCAAGwB,MAEH,qBAAKxB,UAAU,YAAf,SACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,oBAAf,SACE,cAAC,OAAD,CAAM8B,GAAG,IAAT","file":"static/js/8.e435a9cb.chunk.js","sourcesContent":["function t(t){return t.charAt(0).toUpperCase()+t.substr(1,t.length-1)}export{t as capitalize};\n//# sourceMappingURL=capitalize.js.map\n","import {\n  DynamicFormItem,\n  DynamicFormOption,\n  DynamicFormSection,\n  DynamicFormType\n} from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { capitalize } from \"@sebgroup/frontend-tools/capitalize\";\n\nconst getMonthsForLocale = (locale: string) => {\n  var format = new Intl.DateTimeFormat(locale, { month: \"long\" });\n  var months = [];\n  for (var month = 0; month < 12; month++) {\n    var testDate = new Date(Date.UTC(2000, month, 1, 0, 0, 0));\n    months.push(format.format(testDate));\n  }\n  return months;\n};\n\nconst makeOptions = (locale: string): DynamicFormOption[] => {\n  const months: string[] = [\"disabled\", ...getMonthsForLocale(locale)];\n\n  return months.map((month: string, i: number) => {\n    const option: DynamicFormOption = {\n      key: month,\n      value: month,\n      label: capitalize(month),\n      description: `${month} - description`,\n      additionalProps: {\n        disabled: month === \"disabled\"\n      }\n    };\n\n    return option;\n  });\n};\n\nconst makeSections = (locale: string): DynamicFormSection[] => {\n  const types: DynamicFormType[] = [\"Radio\", \"Dropdown\", \"Option\"];\n\n  const commonExtraProps: { [k: string]: any } = {\n    className: \"card p-3 mb-3\"\n  };\n\n  return types.map((controlType: DynamicFormType, i: number) => {\n    const item: DynamicFormItem = {\n      controlType,\n      key: `${controlType}-${i}-item`,\n      label: `${controlType} label example`,\n      description: `${controlType} description example`,\n      placeholder: \"Please select month\",\n      additionalProps:\n        controlType === \"Radio\"\n          ? {\n              className: \"d-flex flex-wrap align-items-between\"\n            }\n          : {},\n      options: [...makeOptions(locale)].map((e) => {\n        return controlType === \"Radio\"\n          ? {\n              ...e,\n              additionalProps: {\n                ...(e.additionalProps || {}),\n                wrapperProps: {\n                  style: {\n                    width: 250\n                  }\n                }\n              }\n            }\n          : e;\n      })\n    };\n\n    return {\n      key: `${controlType}-${i}-section`,\n      order: i,\n      title: `${controlType} section`,\n      items: [item],\n      wrappingElement: \"section\",\n      additionalProps: { ...commonExtraProps }\n    };\n  });\n};\n\nexport const example = (locale: string): DynamicFormSection[] => makeSections(locale);\n","import React, { useEffect } from \"react\";\nimport Header from \"../../Header\";\nimport { example } from \"../../../assets/mocks/wizard-page-4-example\";\nimport { useDynamicForm, DynamicFormSection } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { useWizardContext } from \"../../../providers/WizardProvider\";\nimport { Link } from \"react-router-dom\";\n// import \"./WizardSectionD.scss\";\n\nconst WizardSectionD: React.FC = () => {\n  const ComponentsHeader = () => <Header d3=\"Wizard | Section D\" theme=\"primary\" />;\n  const { setSectionD, sectionD } = useWizardContext();\n\n  const sections: DynamicFormSection[] = example(\"en\");\n\n  const [renderForm, formState, setFormState] = useDynamicForm(sections);\n\n  useEffect(() => {\n    setSectionD({ ...(formState || formState) });\n  }, [formState]);\n\n  useEffect(() => {\n    if (typeof sectionD === \"object\" && Object.keys(sectionD).length) {\n      setFormState(sectionD as any);\n    }\n  }, []);\n\n  // RENDER =+=+=+=+=+=+=+=+=+=+=+=\n  return (\n    <>\n      <ComponentsHeader />\n\n      <div className=\"container-fluid\">\n        <h2>This section includes an example dynamically generated sections based on different input</h2>\n        <p className=\"pl-3 ml-3 text-muted mb-3\">Check the code for more info</p>\n        <>{renderForm()}</>\n\n        <div className=\"card mb-3\">\n          <div className=\"card-footer\">\n            <div className=\"d-flex my-3 w-100\">\n              <Link to=\"c\">Back</Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default WizardSectionD;\n"],"sourceRoot":""}