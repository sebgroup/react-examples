{"version":3,"sources":["../../../src/FeedbackIndicator/FeedbackIndicator.tsx","../../../src/hooks/useDynamicForm.tsx","../../../src/Checkbox/Checkbox.tsx","../../../src/Textbox/Textbox.tsx","../../../src/Textarea/Textarea.tsx","../../../src/Dropdown/Dropdown.tsx","../../../src/hooks/useCombinedRef.ts","../../../src/CloseButton/CloseButton.tsx","../../../src/Dropdown/CustomDropdownItem.tsx","../../../src/Datepicker/Datepicker.tsx","../../../src/Datepicker/formatters.ts","../../../src/Stepper/Stepper.tsx","../../../src/RadioButton/RadioGroup.tsx","../../../src/RadioButton/RadioButton.tsx"],"names":["props","React","useState","indicatorValue","setIndicatorValue","useEffect","type","count","Children","children","Child","toArray","isValidElement","cloneElement","className","classnames","noBorder","message","wrap","DynamicFormComponent","sections","map","section","i","Fragment","key","title","DynamicFormSectionComponent","errors","isEmpty","errorMessages","shouldRender","onChange","state","hasOwnProperty","wrappingElement","additionalProps","getSections","items","item","DynamicFormItemComponent","errorMessage","formItem","controlType","commonProps","name","label","value","minLength","min","maxLength","max","placeholder","descriptionItem","description","indicator","useMemo","Textarea","Textbox","valueType","FeedbackIndicator","RadioGroup","options","option","RadioButton","Dropdown","multiple","multi","Checkbox","checked","Datepicker","Stepper","onIncrease","onDecrease","role","active","find","e","onClick","id","initialState","initialValue","undefined","Array","isArray","every","x","isValidDate","Date","Number","isInteger","setState","setErrorMessages","useCallback","sectionKey","itemKey","rulerKey","condition","length","rulerState","conditionItem","rulerValueItem","sectionState","newValue","target","newOptions","filter","push","targetOption","o","getValueOfMultipleSelect","forwardRef","ref","inline","wrapperProps","setId","randomId","htmlFor","leftSlot","leftSlotTitle","onLeftClick","rightSlot","rightSlotTitle","onRightClick","customId","setCustomId","disabled","clickable","resizable","defaultText","select","from","selected","safeDocument","document","safeWindow","window","text","onMultipleChange","searchable","clearable","selectedLabel","toggleId","selectAllId","show","setShow","allSelected","setAllSelected","searchKeyword","setSearchKeyword","menuStyle","setMenuStyle","setLabel","selectRef","useCombinedRefs","searchRef","useRef","menuRef","dropdownRef","isMobile","test","navigator","userAgent","handleChange","current","dispatchEvent","Event","bubbles","selectAll","forceValue","forEach","_","toggleMenu","event","rect","currentTarget","getBoundingClientRect","top","height","left","bottom","innerHeight","y","minWidth","width","maxHeight","contains","focus","addEventListener","removeEventListener","newLabel","join","CloseButton","createPortal","style","search","hidden","emptyList","list","element","keyword","toLowerCase","trim","String","indexOf","CustomDropdownItem","includes","groupChild","noResult","getOptions","body","targetRef","refs","memo","monthPicker","forceCustom","localeCode","customPickerSelectProps","d","isNaN","getTime","getStringFromDate","getFullYear","substr","getMonth","getDate","getInputRawValue","isDateInRange","initCustomDay","inputRawValue","customDay","setCustomDay","handleChangeCustomDay","v","initCustomMonth","customMonth","setCustomMonth","handleChangeCustomMonth","initCustomYear","customYear","setCustomYear","handleChangeCustomYear","day","month","year","dateString","padNumber","date","m","getRelativeTimeFormat","code","Intl","rtf","RelativeTimeFormat","error","getLocaleOrDefault","locale","DateTimeFormat","console","warn","unitNames","supportsInputOfType","input","createElement","setAttribute","notADateValue","handleOnChange","changeEventValue","customPickerOrder","monthNames","order","unit","unitIndex","renderCustomDatepicker","localeDateString","format","sort","a","b","positions","formatToParts","names","__spreadArray","setMonth","isNumber","values","val","isYear","minimumIntegerDigits","toLocaleString","useGrouping","readOnly"],"mappings":"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","file":"static/js/0.f660955a.chunk.js","sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./feedback-indicator.scss\";\n\nexport type IndicatorType = \"danger\" | \"warning\" | \"success\";\nexport type Indicator = FeedbackIndicatorProps;\n\ntype FeedbackIndicatorProps = React.PropsWithChildren<{\n    /** The type of the indicator. Available values: \"danger\" | \"warning\" | \"success\" */\n    type: IndicatorType;\n    /** The indicator message. `children` can also be used instead. */\n    message?: React.ReactNode;\n    /** Disable feedback indicator border */\n    noBorder?: boolean;\n}>;\n/** A helper component to display feedback for children content */\nexport const FeedbackIndicator: React.FC<FeedbackIndicatorProps> = (props: FeedbackIndicatorProps) => {\n    const [indicatorValue, setIndicatorValue] = React.useState<number>(0);\n\n    React.useEffect(() => {\n        switch (props.type) {\n            case \"danger\":\n                setIndicatorValue(10);\n                break;\n            case \"warning\":\n                setIndicatorValue(50);\n                break;\n            case \"success\":\n                setIndicatorValue(100);\n                break;\n            default:\n                setIndicatorValue(0);\n        }\n    }, [props.type]);\n\n    function wrap(children: any) {\n        const Child: any = React.Children.toArray(children)[0];\n\n        return React.isValidElement(Child) ? (\n            <>\n                {React.cloneElement<any>(Child as any, {\n                    className: classnames((Child.props as any).className, `rc-d feedback feedback-${indicatorValue}`, { \"no-border\": props.noBorder }),\n                })}\n                {props.type && <p className={classnames(\"rc-d feedback-message\")}>{props.message}</p>}\n            </>\n        ) : (\n            Child\n        );\n    }\n\n    const count: number = React.Children.count(props.children);\n\n    return count ? (props.type ? wrap(count > 1 ? <div>{props.children}</div> : props.children) : props.children) : null;\n};\n","import React, { useState, ReactNode, useCallback } from \"react\";\n\nimport { Checkbox } from \"../Checkbox\";\nimport { Textbox } from \"../Textbox\";\nimport { Textarea } from \"../Textarea\";\nimport { Dropdown, getValueOfMultipleSelect } from \"../Dropdown\";\nimport { Datepicker } from \"../Datepicker\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport { Stepper } from \"../Stepper\";\nimport { RadioButton, RadioGroup } from \"../RadioButton\";\nimport { isEmpty } from \"@sebgroup/frontend-tools/isEmpty\";\nimport { isValidDate } from \"@sebgroup/frontend-tools/isValidDate\";\n\ntype DynamicFormInternalStateValue = string | string[] | Date | boolean | number | null;\nexport interface DynamicFormItem {\n    key: string;\n    controlType: DynamicFormType;\n    value?: DynamicFormInternalStateValue;\n    order?: number;\n    label?: string;\n    description?: string;\n    multi?: boolean;\n    min?: any;\n    max?: any;\n    placeholder?: string;\n    options?: Array<DynamicFormOption>;\n    valueType?: \"string\" | \"number\";\n    rulerKey?: string;\n    condition?: DynamicFormInternalStateValue;\n    additionalProps?: {\n        [k: string]: any;\n    };\n}\n\nexport type DynamicFormType = \"Hidden\" | \"Text\" | \"Textarea\" | \"Checkbox\" | \"Dropdown\" | \"Datepicker\" | \"Radio\" | \"Option\" | \"LabelOnly\" | \"Stepper\";\n\nexport interface DynamicFormSection {\n    key: string;\n    title?: string;\n    order?: number;\n    items?: Array<DynamicFormItem>;\n    wrappingElement?: \"div\" | \"section\" | \"none\";\n    additionalProps?: {\n        [k: string]: any;\n    };\n}\n\nexport interface DynamicFormOption<T = any> {\n    key: string;\n    value?: T;\n    label?: string;\n    description?: string;\n    additionalProps?: {\n        [k: string]: any;\n    };\n}\n\ntype InputChange = React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement> | React.MouseEvent<HTMLButtonElement, MouseEvent> | Date | number;\ninterface DynamicFormInternalStateSection {\n    [k: string]: DynamicFormInternalStateValue;\n}\ninterface DynamicFormInternalState {\n    [k: string]: DynamicFormInternalStateSection;\n}\n\ninterface DynamicFormErrors {\n    [k: string]: {\n        [k: string]: string;\n    };\n}\n\ntype OnChangeFormSection = (section: DynamicFormSection) => OnChangeFormItem;\ntype OnChangeFormItem = (item: DynamicFormItem) => OnChangeInput;\ntype OnChangeInput = (e: InputChange) => void;\ntype ShouldRenderFormItem = (sectionKey: string, itemKey: string) => boolean;\n\nexport function useDynamicForm(\n    sections: DynamicFormSection[]\n): [() => JSX.Element, any, React.Dispatch<React.SetStateAction<DynamicFormInternalState>>, React.Dispatch<React.SetStateAction<DynamicFormErrors>>] {\n    const initialState: DynamicFormInternalState = {};\n    sections?.map((section) => {\n        initialState[section?.key] = {};\n        section.items?.map((item) => {\n            const { key, value, multi, controlType }: DynamicFormItem = item;\n            let initialValue: any;\n\n            switch (controlType) {\n                case \"Dropdown\": {\n                    if (multi) {\n                        if (value !== null && value !== undefined && Array.isArray(value) && (value as any[]).every((x) => typeof x === \"string\")) {\n                            initialValue = value as string[];\n                        } else {\n                            initialValue = [];\n                        }\n                    } else {\n                        initialValue = typeof value === \"string\" ? value : \"\";\n                    }\n                    break;\n                }\n                case \"Checkbox\": {\n                    initialValue = !!value;\n                    break;\n                }\n                case \"Datepicker\": {\n                    if (typeof value == \"string\" || typeof value == \"number\") {\n                        initialValue = isValidDate(new Date(value)) ? new Date(value) : null;\n                    } else if (value instanceof Date) {\n                        initialValue = value as Date;\n                    } else {\n                        initialValue = null;\n                    }\n                    break;\n                }\n                case \"Stepper\": {\n                    if (typeof value !== \"number\" && Number.isInteger(Number(value))) {\n                        initialValue = Number(value);\n                    } else {\n                        initialValue = value;\n                    }\n                    break;\n                }\n                case \"Option\": {\n                    initialValue = Array.isArray(value) ? value : [];\n                    break;\n                }\n                case \"Radio\": {\n                    if (typeof value === \"string\" || typeof value === \"number\") {\n                        initialValue = value;\n                    } else {\n                        initialValue = \"\";\n                    }\n                    break;\n                }\n                default:\n                    initialValue = value || \"\";\n                    break;\n            }\n\n            (initialState[section?.key] as DynamicFormInternalStateSection)[key] = initialValue;\n        });\n    });\n    const [state, setState] = useState<DynamicFormInternalState>(initialState);\n    const [errorMessages, setErrorMessages] = useState<DynamicFormErrors>({});\n\n    /**\n     * SHOULD RENDER CONTROL:\n     * Determines if the form control should be rendered or not.\n     * @param sectionKey section key\n     * @param itemKey section key\n     */\n    const shouldRender: ShouldRenderFormItem = useCallback<ShouldRenderFormItem>(\n        (sectionKey: string, itemKey: string): boolean => {\n            const { rulerKey, condition, controlType }: Partial<DynamicFormItem> =\n                sections?.find((item: DynamicFormSection) => item.key === sectionKey)?.items?.find((item: DynamicFormItem) => item.key === itemKey) || {};\n            if (controlType === \"Hidden\") {\n                // Marked as hidden, don't render\n                return false;\n            }\n            if (typeof rulerKey === \"string\" && !!rulerKey.length) {\n                let rulerState: DynamicFormInternalStateValue;\n\n                if (!isEmpty(state) && !isEmpty(state[sectionKey])) {\n                    rulerState = (state[sectionKey] as DynamicFormInternalStateSection)[rulerKey];\n                }\n\n                if (rulerState === undefined || condition === undefined) {\n                    return false;\n                }\n\n                if (typeof rulerState === \"string\" && rulerState === condition) {\n                    return shouldRender(sectionKey, rulerKey);\n                } else if (rulerState && condition && typeof condition === \"object\" && Array.isArray(condition)) {\n                    for (const conditionItem of condition as any[]) {\n                        if (conditionItem) {\n                            if (typeof rulerState === \"object\" && Array.isArray(rulerState)) {\n                                for (const rulerValueItem of rulerState) {\n                                    if (rulerValueItem && typeof rulerValueItem === \"string\" && rulerValueItem === conditionItem) {\n                                        return shouldRender(sectionKey, rulerKey);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else if (rulerState && typeof rulerState === \"boolean\") {\n                    return shouldRender(sectionKey, rulerKey);\n                }\n                return false;\n            }\n            return true;\n        },\n        [state, sections]\n    );\n\n    const onChange: OnChangeFormSection = useCallback<OnChangeFormSection>(\n        (section: DynamicFormSection) => (item: DynamicFormItem) => (e: InputChange) => {\n            const sectionState: DynamicFormInternalStateSection = state && state.hasOwnProperty(section.key) ? state[section.key] : {};\n            const controlType: DynamicFormType = item?.controlType || \"Text\";\n            let newValue: DynamicFormInternalStateValue = null;\n\n            switch (controlType) {\n                case \"Text\":\n                case \"Textarea\":\n                    newValue = (e as React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>).target.value;\n                    newValue = item.valueType === \"number\" ? Number(newValue) : newValue;\n                    break;\n                case \"Option\": {\n                    let newOptions: string[] = [...((sectionState[item.key] as string[]) || [])];\n                    const targetValue: string = (e as React.ChangeEvent<HTMLInputElement>).target.value;\n\n                    if (newOptions.find((e: string) => e === targetValue)) {\n                        newOptions = [...newOptions.filter((e: string) => e !== targetValue)];\n                    } else {\n                        newOptions.push(targetValue);\n                    }\n                    newValue = newOptions;\n                    break;\n                }\n                case \"Radio\": {\n                    const targetValue: string = (e as React.ChangeEvent<HTMLInputElement>).target.value;\n                    const targetOption: DynamicFormOption | undefined = item.options?.find((o) => o.value === targetValue);\n                    if (targetOption) {\n                        newValue = targetOption.value;\n                    }\n                    break;\n                }\n                case \"Checkbox\": {\n                    const targetValue: boolean = (e as React.ChangeEvent<HTMLInputElement>).target.checked;\n                    newValue = targetValue;\n                    break;\n                }\n                case \"Dropdown\": {\n                    const target = (e as React.ChangeEvent<HTMLSelectElement>).target;\n                    newValue = target.multiple ? getValueOfMultipleSelect(target) : target.value;\n                    break;\n                }\n\n                default: {\n                    newValue = e as any;\n                    break;\n                }\n            }\n\n            setState({\n                ...state,\n                [section.key]: {\n                    ...sectionState,\n                    [item.key]: newValue,\n                },\n            });\n        },\n        [state]\n    );\n    const renderForm = useCallback(() => {\n        return <DynamicFormComponent sections={sections} errorMessages={errorMessages} state={state} onChange={onChange} shouldRender={shouldRender} />;\n    }, [sections, state, onChange, shouldRender, errorMessages]);\n\n    return [renderForm, state, setState, setErrorMessages];\n}\n\nconst DynamicFormComponent: React.FC<{\n    sections: DynamicFormSection[];\n    errorMessages: DynamicFormErrors;\n    state: DynamicFormInternalState;\n    onChange: OnChangeFormSection;\n    shouldRender: ShouldRenderFormItem;\n}> = (props) => {\n    return (\n        <>\n            {props.sections?.map((section, i) => (\n                <React.Fragment key={i}>\n                    {!!section?.title ? <h4>{section.title}</h4> : null}\n                    <DynamicFormSectionComponent\n                        key={i}\n                        section={section}\n                        errors={!isEmpty(props.errorMessages) && !isEmpty(props.errorMessages[section.key]) ? props.errorMessages[section.key] : {}}\n                        shouldRender={props.shouldRender}\n                        onChange={props.onChange(section)}\n                        state={props.state && props.state.hasOwnProperty(section.key) ? props.state[section.key] : null}\n                    />\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n\nconst DynamicFormSectionComponent: React.FC<{\n    section: DynamicFormSection;\n    state: DynamicFormInternalStateSection;\n    errors: { [k: string]: string };\n    onChange: OnChangeFormItem;\n    shouldRender: ShouldRenderFormItem;\n}> = (props) => {\n    const { wrappingElement = \"none\", additionalProps = {} } = props.section;\n\n    const getSections = (): JSX.Element[] =>\n        props.section?.items?.map((item, i) => {\n            if (props.shouldRender(props.section.key, item.key)) {\n                return (\n                    <DynamicFormItemComponent\n                        key={i}\n                        item={item}\n                        errorMessage={!isEmpty(props.errors) && !isEmpty(props.errors[item.key]) ? props.errors[item.key] : null}\n                        onChange={props.onChange(item)}\n                        state={props.state ? (props.state as DynamicFormInternalStateSection)[item.key] : null}\n                    />\n                );\n            }\n        });\n\n    switch (wrappingElement) {\n        case \"div\":\n            return <div {...additionalProps}>{getSections()}</div>;\n        case \"section\":\n            return <section {...additionalProps}>{getSections()}</section>;\n\n        default:\n            return <>{getSections()}</>;\n    }\n};\n\nconst DynamicFormItemComponent: React.FC<{\n    item: DynamicFormItem;\n    state: DynamicFormInternalStateValue;\n    errorMessage: string | null;\n    onChange: OnChangeInput;\n}> = (props) => {\n    const controlType: DynamicFormType = props.item?.controlType || \"Text\";\n    const commonProps: {\n        name: string;\n        label: string;\n        value: any;\n        minLength: number;\n        maxLength: number;\n        placeholder: string;\n        onChange: (...args: any[]) => void;\n    } = {\n        name: props.item?.key || \"\",\n        label: props.item?.label || \"\",\n        value: props.state as any,\n        minLength: props.item?.min,\n        maxLength: props.item?.max,\n        placeholder: props.item?.placeholder,\n        onChange: props.onChange,\n    };\n\n    const { additionalProps = {} }: DynamicFormItem = props.item;\n\n    let formItem: ReactNode;\n\n    const descriptionItem: ReactNode = props.item?.description ? <p className=\"rc dynamic-form text-muted m-0\">{props.item?.description}</p> : <></>;\n\n    const indicator: Indicator = React.useMemo(() => {\n        return props.errorMessage ? { type: \"danger\", message: props.errorMessage } : null;\n    }, [props.errorMessage]);\n\n    switch (controlType) {\n        case \"Textarea\": {\n            formItem = (\n                <>\n                    <Textarea {...commonProps} indicator={indicator} {...additionalProps} />\n                    {descriptionItem}\n                </>\n            );\n            break;\n        }\n        case \"Text\": {\n            formItem = (\n                <>\n                    <Textbox {...commonProps} indicator={indicator} type={props.item.valueType || \"text\"} {...additionalProps} />\n                    {descriptionItem}\n                </>\n            );\n            break;\n        }\n\n        case \"Radio\": {\n            const { name, onChange, label, value } = commonProps;\n\n            formItem = (\n                <>\n                    {label && <label>{label}</label>}\n                    <FeedbackIndicator type={indicator?.type} message={indicator?.message}>\n                        <RadioGroup {...{ name, onChange, value }} {...additionalProps}>\n                            {props.item?.options?.map((option: DynamicFormOption, i) => (\n                                <RadioButton key={i} value={option?.value} {...(option?.additionalProps || {})}>\n                                    {option?.label}\n                                    {option?.description && <p className=\"text-muted m-0\">{option?.description}</p>}\n                                </RadioButton>\n                            ))}\n                        </RadioGroup>\n                    </FeedbackIndicator>\n                    {descriptionItem}\n                </>\n            );\n            break;\n        }\n\n        case \"Dropdown\": {\n            const { name, onChange, placeholder, label, value } = commonProps;\n\n            formItem = (\n                <>\n                    {label && <label>{label}</label>}\n                    <Dropdown {...{ name, onChange, placeholder, value }} indicator={indicator} multiple={props.item?.multi} {...additionalProps}>\n                        {props.item?.options?.map((option: DynamicFormOption, i) => (\n                            <option key={i} value={option?.value} {...(option?.additionalProps || {})}>\n                                {option?.label}\n                            </option>\n                        ))}\n                    </Dropdown>\n                    {descriptionItem}\n                </>\n            );\n            break;\n        }\n\n        case \"Checkbox\": {\n            const { name, onChange, value } = commonProps;\n            formItem = (\n                <Checkbox {...{ name, onChange }} indicator={indicator} checked={!!value} {...additionalProps}>\n                    {commonProps.label}\n                    {descriptionItem}\n                </Checkbox>\n            );\n            break;\n        }\n\n        case \"Datepicker\": {\n            const { onChange, name, label, value } = commonProps;\n            formItem = (\n                <>\n                    {label && <label>{label}</label>}\n                    <FeedbackIndicator type={indicator?.type} message={indicator?.message}>\n                        <Datepicker {...{ value, onChange, name }} min={props.item?.min} max={props.item?.max} {...additionalProps} />\n                    </FeedbackIndicator>\n                    {descriptionItem}\n                </>\n            );\n            break;\n        }\n\n        case \"Stepper\": {\n            const { label, value } = commonProps;\n\n            formItem = (\n                <>\n                    <Stepper\n                        {...{ value, label }}\n                        indicator={indicator}\n                        min={props.item?.min || 0}\n                        max={props.item?.max || 100}\n                        onIncrease={() => props.onChange(value + 1)}\n                        onDecrease={() => props.onChange(value - 1)}\n                        {...additionalProps}\n                    />\n                    {descriptionItem}\n                </>\n            );\n            break;\n        }\n\n        case \"Option\": {\n            const { label, value } = commonProps;\n\n            formItem = (\n                <>\n                    {label && <label>{label}</label>}\n                    <FeedbackIndicator type={indicator?.type} message={indicator?.message}>\n                        <div className=\"d-flex flex-wrap\" role=\"group\" {...additionalProps}>\n                            {props.item?.options?.map((option: DynamicFormOption, i) => {\n                                const active: boolean = !!(value as string[])?.find((e: string) => option.value === e);\n                                return (\n                                    <button\n                                        key={i}\n                                        onClick={props.onChange}\n                                        type=\"button\"\n                                        id={option.key}\n                                        name={props.item?.key}\n                                        className={`btn btn-sm mr-1 mb-1 btn-outline-primary${active ? \" active\" : \"\"}`}\n                                        value={option.value}\n                                        {...(option?.additionalProps || {})}\n                                    >\n                                        {option?.label}\n                                    </button>\n                                );\n                            })}\n                        </div>\n                    </FeedbackIndicator>\n                    {descriptionItem}\n                </>\n            );\n            break;\n        }\n\n        case \"LabelOnly\": {\n            const { label } = commonProps;\n            formItem = (\n                <>\n                    {label && <label>{label}</label>}\n                    {descriptionItem}\n                </>\n            );\n            break;\n        }\n\n        default:\n            formItem = (\n                <>\n                    <label>{props.item?.label}</label>\n                    {` ERORR: controlType: ${controlType} not recognised.`}\n                </>\n            );\n            break;\n    }\n\n    return <>{formItem}</>;\n};\n","import React from \"react\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator/FeedbackIndicator\";\nimport \"./checkbox.scss\";\n\nexport type CheckboxProps = JSX.IntrinsicElements[\"input\"] & {\n    /** Displays the checkbox inline */\n    inline?: boolean;\n    /** Div wrapper props */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n    /** Indicator for error, warning or success */\n    indicator?: Indicator;\n};\n\nexport const Checkbox: React.FC<CheckboxProps> = React.forwardRef(({ inline, wrapperProps, indicator, children, ...props }: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n    const [id, setId] = React.useState<string>(props.id);\n\n    React.useEffect(() => setId(props.id || (children ? props.id || randomId(\"checkbox-\") : null)), [props.id, children]);\n\n    return (\n        <FeedbackIndicator {...indicator}>\n            <div {...wrapperProps} className={classnames(\"rc\", \"checkbox\", { inline }, wrapperProps?.className)}>\n                <div className={classnames(\"custom-control\", \"custom-checkbox\", { \"custom-control-inline\": inline })}>\n                    <input {...props} type=\"checkbox\" id={id} className={classnames(\"custom-control-input\", props.className)} ref={ref} />\n                    <label className=\"custom-control-label\" htmlFor={id}>\n                        {children}\n                    </label>\n                </div>\n            </div>\n        </FeedbackIndicator>\n    );\n});\n","import React from \"react\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./textbox.scss\";\n\nexport type TextboxProps = JSX.IntrinsicElements[\"input\"] & {\n    /** Element label */\n    label?: string;\n    /** Element prefix slot */\n    leftSlot?: React.ReactNode;\n    /** Element prefix title */\n    leftSlotTitle?: string;\n    /** Callback when prefix button is clicked */\n    onLeftClick?: (event: React.MouseEvent<HTMLDivElement>) => void;\n    /** Callback when suffix button is clicked */\n    onRightClick?: (event: React.MouseEvent<HTMLDivElement>) => void;\n    /** Component associates with input ref */\n    reference?: React.RefObject<HTMLInputElement>;\n    /** Element suffix slot */\n    rightSlot?: React.ReactNode;\n    /** Element suffix title */\n    rightSlotTitle?: string;\n    /** Feedback indicator object */\n    indicator?: Indicator;\n    /** Wrapper props */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n/** Textbox is a component that allows user to add or edit text with extra text or icon port */\nexport const Textbox: React.FC<TextboxProps> = React.forwardRef(\n    ({ leftSlot, leftSlotTitle, onLeftClick, rightSlot, rightSlotTitle, onRightClick, indicator, wrapperProps, ...props }: TextboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n        const [customId, setCustomId] = React.useState<string>(null);\n\n        React.useEffect(() => setCustomId(props.id ? props.id : props.label ? randomId(\"tbg-\") : null), [props.id]);\n\n        return (\n            <div className={classnames(\"rc input-box-group\", props.className)}>\n                {props.label && (\n                    <label className=\"custom-label\" htmlFor={customId}>\n                        {props.label}\n                    </label>\n                )}\n                <div className={classnames(\"rc input-group\", { disabled: props.disabled })}>\n                    <FeedbackIndicator {...indicator}>\n                        <div className=\"input-box-group-wrapper\">\n                            {leftSlot && (\n                                <div className={classnames(\"input-group-prepend\", { clickable: onLeftClick })} role={onLeftClick ? \"button\" : \"\"} onClick={onLeftClick}>\n                                    <span className=\"input-group-text\" title={leftSlotTitle}>\n                                        {leftSlot}\n                                    </span>\n                                </div>\n                            )}\n                            <input {...props} ref={ref} id={customId} className=\"form-control\" />\n                            {rightSlot && (\n                                <div className={classnames(\"input-group-append\", { clickable: onRightClick })} onClick={onRightClick} role={onRightClick ? \"button\" : \"\"}>\n                                    <span className=\"input-group-text\" title={rightSlotTitle}>\n                                        {rightSlot}\n                                    </span>\n                                </div>\n                            )}\n                        </div>\n                    </FeedbackIndicator>\n                </div>\n            </div>\n        );\n    }\n);\n","import React from \"react\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./textarea.scss\";\n\nexport type TextareaProps = JSX.IntrinsicElements[\"textarea\"] & {\n    /** Element label */\n    label?: string;\n    /** Property sets whether textarea is resizable */\n    resizable?: boolean;\n    /** Form indicator */\n    indicator?: Indicator;\n    /** Wrapper props (div) */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n/** Textarea is a component that allows user to add or edit text in multiline */\nexport const Textarea: React.FC<TextareaProps> = React.forwardRef(({ indicator, label, resizable, wrapperProps = {}, ...props }: TextareaProps, ref: React.ForwardedRef<HTMLTextAreaElement>) => {\n    const [id, setId] = React.useState<string>();\n\n    React.useEffect(() => setId(props.id ? props.id : label ? randomId(\"textarea-\") : null), [props.id, label]);\n\n    return (\n        <div {...wrapperProps} className={classnames(\"rc text-area input-field\", wrapperProps.className)}>\n            {label && <label htmlFor={id}>{label}</label>}\n            <FeedbackIndicator {...indicator}>\n                <textarea {...props} ref={ref} className={classnames(\"form-control\", { resizable }, props.className)} />\n            </FeedbackIndicator>\n        </div>\n    );\n});\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport classnames from \"classnames\";\nimport { useCombinedRefs } from \"../hooks/useCombinedRef\";\nimport { CloseButton } from \"../CloseButton\";\nimport { CustomDropdownItem } from \"./CustomDropdownItem\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator/FeedbackIndicator\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport \"./dropdown.scss\";\n\nexport interface DropdownText {\n    selectAll?: string;\n    noResult?: string;\n    emptyList?: string;\n    search?: string;\n}\n\nconst defaultText: Required<DropdownText> = {\n    selectAll: \"Select all\",\n    emptyList: \"List is empty\",\n    noResult: \"No result\",\n    search: \"Search...\",\n};\n\nexport function getValueOfMultipleSelect(select: HTMLSelectElement): string[] {\n    return Array.from(select.options)\n        .filter((option) => option.selected)\n        .map((option) => option.value);\n}\n\n// This solution is meant to fix Gatsby build which complains that document and window doesn't exist in server-side rendering\nconst safeDocument: Document | null = typeof document !== \"undefined\" ? document : null;\nconst safeWindow: Window | null = typeof window !== \"undefined\" ? window : null;\n\nexport type DropdownProps = Omit<JSX.IntrinsicElements[\"select\"], \"value\"> & {\n    /** Props for the select's wrapper (div) */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n    /** The value of the dropdown */\n    value?: string | string[];\n    /** An event triggered when a select of type multiple is changed returning an array of the selected values */\n    onMultipleChange?: (selected: string[]) => void;\n    /** Allows searching throw the dropdown */\n    searchable?: boolean;\n    /** Allows clearing the dropdown with a clear button */\n    clearable?: boolean;\n    /** Allows setting custom label to be displayed for selected item */\n    selectedLabel?: string | ((value: string | string[]) => string | string[]);\n    /** Custom texts to be dispalyed in different parts of the dropdown */\n    text?: DropdownText;\n    /** Indicator for error, warning or success */\n    indicator?: Indicator;\n};\n\nexport const Dropdown: React.FC<DropdownProps> = React.forwardRef(\n    ({ wrapperProps = {}, text = {}, onMultipleChange, searchable, clearable, selectedLabel, indicator, ...props }: DropdownProps, ref) => {\n        const [toggleId] = React.useState<string>(randomId(\"ddt-\"));\n        const [selectAllId] = React.useState<string>(randomId(\"sa-\"));\n        const [show, setShow] = React.useState<boolean>(false);\n        const [allSelected, setAllSelected] = React.useState<boolean>(false);\n        const [searchKeyword, setSearchKeyword] = React.useState<string>(\"\");\n        const [menuStyle, setMenuStyle] = React.useState<React.CSSProperties>({});\n        const [label, setLabel] = React.useState<string>();\n\n        const selectRef = useCombinedRefs<HTMLSelectElement>(ref);\n        const searchRef = React.useRef<HTMLInputElement>();\n        const menuRef = React.useRef<HTMLDivElement>();\n        const dropdownRef = React.useRef<HTMLDivElement>();\n\n        const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(safeWindow?.navigator?.userAgent);\n\n        const handleChange = React.useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>) => {\n                if (props.multiple) {\n                    const current = Array.from(selectRef.current.options).find((option) => option.value == e.target.value);\n                    current.selected = !current.selected;\n                } else {\n                    selectRef.current.value = e.target.value;\n                    setShow(false);\n                }\n                selectRef.current.dispatchEvent(new Event(\"change\", { bubbles: true }));\n                props.multiple && onMultipleChange && onMultipleChange(getValueOfMultipleSelect(selectRef.current));\n            },\n            [isMobile, props.multiple, onMultipleChange]\n        );\n\n        const selectAll = React.useCallback(\n            (forceValue?: boolean | React.ChangeEvent<HTMLInputElement>) => {\n                Array.from(selectRef.current.options).forEach((_, i) => {\n                    const option = selectRef.current.options.item(i);\n                    if (!option.disabled) {\n                        option.selected = typeof forceValue === \"boolean\" ? forceValue : !allSelected;\n                    } else {\n                        option.selected = false;\n                    }\n                });\n                typeof forceValue === \"boolean\" && (selectRef.current.value = \"\");\n                selectRef.current.dispatchEvent(new Event(\"change\", { bubbles: true }));\n                props.multiple && onMultipleChange && onMultipleChange(getValueOfMultipleSelect(selectRef.current));\n            },\n            [allSelected, props.multiple]\n        );\n\n        const isAllSelected = (): boolean => {\n            return Array.from(selectRef.current.options).every((_, i) => {\n                const option: HTMLOptionElement = selectRef.current.options.item(i);\n                return option.disabled ? true : option.selected;\n            });\n        };\n\n        const toggleMenu = React.useCallback(\n            (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (show) {\n                    setShow(false);\n                } else {\n                    const rect = event.currentTarget.getBoundingClientRect();\n                    const top: number = rect.top + rect.height;\n                    const left: number = rect.left;\n                    const bottom: number = window.innerHeight - rect.y + 4;\n                    const minWidth: number = rect.width;\n                    if (window.innerHeight - top < 200) {\n                        setMenuStyle({ minWidth, bottom, left, maxHeight: rect.y - 10 });\n                    } else {\n                        setMenuStyle({ minWidth, top, left, maxHeight: window.innerHeight - top - 12 });\n                    }\n                    setShow(true);\n                }\n            },\n            [show]\n        );\n\n        const onChange = React.useCallback(\n            (event: React.ChangeEvent<HTMLSelectElement>) => {\n                props.multiple && onMultipleChange && onMultipleChange(getValueOfMultipleSelect(event.target));\n                props.onChange && props.onChange(event);\n            },\n            [props.multiple, props.onChange, onMultipleChange]\n        );\n\n        /** TODO: Can be extracted to a component */\n        const getOptions = () => {\n            const list = React.Children.map(props.children, (Child) => {\n                if (!React.isValidElement(Child)) {\n                    return Child;\n                } else {\n                    const type: string = (Child.type as any)?.name || Child.type;\n                    const filteredBySearch = (element: React.ReactElement<any>): boolean => {\n                        if (searchKeyword) {\n                            if (React.isValidElement<any>(element)) {\n                                const keyword: string = searchKeyword.toLowerCase().trim();\n                                const text: string = String(element.props?.children).toLowerCase().trim();\n                                return text.indexOf(keyword) < 0;\n                            } else {\n                                return true;\n                            }\n                        }\n                        return false;\n                    };\n                    /** Radio buttons should be grouped with a name */\n                    const name: string = props.multiple ? null : toggleId;\n                    switch (type) {\n                        case \"option\":\n                            return filteredBySearch(Child) ? null : (\n                                <CustomDropdownItem\n                                    {...Child.props}\n                                    multiple={props.multiple}\n                                    name={name}\n                                    value={Child.props.value}\n                                    checked={Array.isArray(props.value) ? props.value.includes(Child.props.value) : props.value == Child.props.value}\n                                    onChange={handleChange}\n                                >\n                                    {Child.props.children}\n                                </CustomDropdownItem>\n                            );\n                        case \"optgroup\":\n                            const label = <label className=\"optgroup-label\">{Child.props?.label}</label>;\n                            return [\n                                searchKeyword ? null : label,\n                                ...React.Children.toArray(Child.props.children).map((groupChild: React.ReactElement<any>) => {\n                                    return filteredBySearch(groupChild) ? null : (\n                                        <CustomDropdownItem\n                                            {...groupChild.props}\n                                            multiple={props.multiple}\n                                            name={name}\n                                            value={groupChild.props.value}\n                                            checked={Array.isArray(props.value) ? props.value.includes(groupChild.props.value) : props.value == groupChild.props.value}\n                                            onChange={handleChange}\n                                        >\n                                            {groupChild.props.children}\n                                        </CustomDropdownItem>\n                                    );\n                                }),\n                            ];\n                        default:\n                            return searchKeyword ? null : Child;\n                    }\n                }\n            });\n            return list?.length ? list : searchKeyword ? <p>{text.noResult || defaultText.noResult}</p> : <p>{text.emptyList || defaultText.emptyList}</p>;\n        };\n\n        React.useEffect(() => {\n            !isMobile && props.multiple && setAllSelected(isAllSelected());\n        }, [props.value]);\n\n        React.useEffect(() => {\n            if (!isMobile) {\n                const detectBlur = (event: MouseEvent) => {\n                    if (!dropdownRef.current.contains(event.target as any) && !menuRef.current.contains(event.target as any)) {\n                        setShow(false);\n                    }\n                };\n                const handleScroll = (event: WheelEvent): void => {\n                    if (!menuRef.current.contains(event.target as any)) {\n                        setShow(false);\n                    }\n                };\n\n                if (show) {\n                    searchRef.current?.focus();\n                    document.addEventListener(\"click\", detectBlur);\n                    window.addEventListener(\"wheel\", handleScroll);\n                } else {\n                    document.removeEventListener(\"click\", detectBlur);\n                    window.removeEventListener(\"wheel\", handleScroll);\n                }\n\n                return () => {\n                    document.removeEventListener(\"click\", detectBlur);\n                    window.removeEventListener(\"wheel\", handleScroll);\n                };\n            }\n        }, [show]);\n\n        React.useEffect(() => {\n            if (selectedLabel && typeof selectedLabel === \"string\") {\n                !isMobile && setLabel(selectedLabel || props.placeholder);\n            } else if (selectedLabel && typeof selectedLabel === \"function\") {\n                const newLabel: string | string[] = selectedLabel(props.value);\n                !isMobile && setLabel((Array.isArray(newLabel) ? newLabel.join(\", \") : newLabel) || props.placeholder);\n            } else {\n                !isMobile && setLabel((Array.isArray(props.value) ? props.value.join(\", \") : props.value) || props.placeholder);\n            }\n        }, [props.value, props.placeholder, selectedLabel]);\n\n        return (\n            <div {...wrapperProps} className={classnames(\"rc custom-dropdown\", wrapperProps.className)}>\n                {!isMobile && (\n                    <div className={classnames(\"dropdown\", { show, clearable })} ref={dropdownRef}>\n                        <FeedbackIndicator type={indicator?.type} message={null}>\n                            <button\n                                className=\"btn btn-secondary dropdown-toggle\"\n                                type=\"button\"\n                                id={toggleId}\n                                data-toggle=\"dropdown\"\n                                aria-haspopup=\"true\"\n                                aria-expanded=\"false\"\n                                onClick={toggleMenu}\n                                disabled={props.disabled}\n                            >\n                                <span>{label}</span>\n                            </button>\n                        </FeedbackIndicator>\n                        {clearable && <CloseButton onClick={() => selectAll(false)} disabled={props.disabled} />}\n                        {!safeDocument\n                            ? null\n                            : createPortal(\n                                  <div className={classnames(\"rc dropdown-menu\", { show })} aria-labelledby={toggleId} ref={menuRef} style={{ ...menuStyle }}>\n                                      {searchable && (\n                                          <input\n                                              className=\"form-control\"\n                                              type=\"search\"\n                                              placeholder={text.search || defaultText.search}\n                                              value={searchKeyword}\n                                              onChange={(e) => setSearchKeyword(e.target.value)}\n                                              ref={searchRef}\n                                          />\n                                      )}\n                                      {/* Select all button */}\n                                      {props.multiple && !searchKeyword ? (\n                                          React.Children.count(props.children) ? (\n                                              <>\n                                                  <div className=\"custom-control custom-checkbox select-all\">\n                                                      <input id={selectAllId} name=\"inline\" type=\"checkbox\" className=\"custom-control-input\" checked={allSelected} hidden onChange={selectAll} />\n                                                      <label className=\"custom-control-label\" htmlFor={selectAllId}>\n                                                          {text.selectAll || defaultText.selectAll}\n                                                      </label>\n                                                  </div>\n                                                  <div className=\"dropdown-divider\" />\n                                              </>\n                                          ) : (\n                                              text.emptyList || defaultText.emptyList\n                                          )\n                                      ) : null}\n\n                                      {getOptions()}\n                                  </div>,\n                                  safeDocument.body\n                              )}\n                    </div>\n                )}\n                <FeedbackIndicator type={indicator?.type} message={indicator?.message}>\n                    <select {...props} ref={selectRef} onChange={onChange} className={classnames(\"custom-select\", props.className)} hidden={!isMobile}>\n                        {/* select always picks the first item by default. Therefore the first needs to be initialized here */}\n                        {!props.value && (\n                            <option disabled value=\"\" hidden>\n                                {props.placeholder}\n                            </option>\n                        )}\n                        {React.Children.toArray(props.children).filter((Child: any) => [\"option\", \"optgroup\"].includes(Child.type))}\n                    </select>\n                </FeedbackIndicator>\n\n                {clearable && isMobile && <CloseButton onClick={() => selectAll(false)} disabled={props.disabled} />}\n            </div>\n        );\n    }\n);\n","import React from \"react\";\n\n/**\n * Allows you to use the ref as well as forward it to parent component to use\n * @param refs The refs to forward to. Usually the forwarded ref\n */\nexport function useCombinedRefs<T>(...refs: Array<React.LegacyRef<T> | React.RefObject<T>>): React.MutableRefObject<T> {\n    const targetRef = React.useRef<T>();\n\n    React.useEffect(() => {\n        refs.forEach((ref) => {\n            if (!ref) return;\n\n            if (typeof ref === \"function\") {\n                ref(targetRef.current);\n            } else {\n                (ref as any).current = targetRef.current;\n            }\n        });\n    }, [refs]);\n\n    return targetRef;\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./close-button.scss\";\n\n/**\n * TODO: This is a component that fixes the broken `.close` element provided by Bootstrap\n * This component should be replaced by the element from Bootstrap when this PR is merged:\n * https://github.com/sebgroup/bootstrap/pull/533\n */\n\nexport const CloseButton: React.FC<JSX.IntrinsicElements[\"button\"]> = React.memo(\n    React.forwardRef((props: JSX.IntrinsicElements[\"button\"], ref: React.ForwardedRef<HTMLButtonElement>) => {\n        return <button ref={ref} {...props} className={classnames(\"rc close-btn\", props.className)} />;\n    })\n);\n","import React from \"react\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\n\nexport type CustomDropdownItemProps = JSX.IntrinsicElements[\"input\"] & {\n    multiple?: boolean;\n};\n\nexport const CustomDropdownItem: React.FC<CustomDropdownItemProps> = ({ multiple, children, ...props }: CustomDropdownItemProps) => {\n    const [id] = React.useState<string>(randomId(\"ddi-\"));\n\n    return (\n        <div className={classnames(\"custom-control\", { \"custom-checkbox\": multiple })}>\n            <input {...props} type={multiple ? \"checkbox\" : \"radio\"} id={id} className={classnames({ \"custom-control-input\": multiple }) || null} hidden={!multiple} />\n            <label className={classnames({ \"custom-control-label\": multiple, \"custom-radio\": !multiple })} htmlFor={id}>\n                {children}\n            </label>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { padNumber } from \"./formatters\";\nimport classnames from \"classnames\";\nimport \"./datepicker.scss\";\n\ninterface OverriddenNativeProps extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\n    value: any;\n    min?: any;\n    max?: any;\n    onChange: any;\n}\n\nexport interface DatepickerProps extends OverriddenNativeProps {\n    /** the value of the datepicker as a Date object */\n    value: Date;\n    /** On Change handler with the latest Date value */\n    onChange: (value: Date) => void;\n    /** Property sets whether a datepicker is a month picker  */\n    monthPicker?: boolean;\n    /** Property sets whether SEB styled datepicker will be rendered despite the browser used */\n    forceCustom?: boolean;\n    /** Minimum range of date that can be selected */\n    min?: Date;\n    /** Maximum range of date that can be selected */\n    max?: Date;\n    /** Locale of datepicker */\n    localeCode?: string;\n    /** Div wrapper props. NOTE: customPicker ONLY! */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n    /** Props for the select element of month picker. NOTE: customPicker ONLY! */\n    customPickerSelectProps?: JSX.IntrinsicElements[\"select\"];\n}\n\ninterface UnitNames {\n    month: string;\n    day: string;\n    year: string;\n}\n\nexport const Datepicker: React.FunctionComponent<DatepickerProps> = React.forwardRef(\n    (\n        { monthPicker, forceCustom, className, value, min, max, disabled, onChange, localeCode = \"en\", wrapperProps, customPickerSelectProps, ...props }: DatepickerProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ): React.ReactElement<void> => {\n        const isValidDate = React.useCallback((d: Date): boolean => {\n            return !!(d && d instanceof Date && !isNaN(d.getTime()));\n        }, []);\n\n        const getStringFromDate = React.useCallback(\n            (d: Date, monthPicker: boolean): string => {\n                if (isValidDate(d)) {\n                    const year: string = `0000${d.getFullYear()}`.substr(-4, 4);\n                    const month: string = `00${d.getMonth() + 1}`.substr(-2, 2);\n                    const day: string = `00${d.getDate()}`.substr(-2, 2);\n\n                    return `${year}-${month}-${day}`.substr(0, monthPicker ? 7 : 10) || \"\";\n                } else {\n                    return \"\";\n                }\n            },\n            [isValidDate]\n        );\n\n        const getInputRawValue = React.useCallback(\n            (value: Date, monthPicker: boolean): string => {\n                return getStringFromDate(value, monthPicker);\n            },\n            [getStringFromDate]\n        );\n\n        const isDateInRange = React.useCallback((d: Date, min: Date, max: Date): boolean => {\n            if (!min && !max) {\n                return true;\n            } else if (min && d >= min) {\n                if (!max || (max && d <= max)) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }, []);\n\n        const initCustomDay = React.useCallback(\n            (value: Date, monthPicker: boolean): number => {\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\n                if (!!inputRawValue) {\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(8, 2));\n                    return value;\n                }\n            },\n            [getInputRawValue]\n        );\n\n        const [customDay, setCustomDay] = React.useState<number>(initCustomDay(value, monthPicker));\n\n        const handleChangeCustomDay = (e: React.ChangeEvent<HTMLInputElement>): void => {\n            if (!monthPicker) {\n                const v: number = e.target?.value && !Number.isNaN(Number(e.target?.value)) ? Number(e.target.value) : null;\n                setCustomDay(v);\n            }\n        };\n\n        const initCustomMonth = React.useCallback(\n            (value: Date, monthPicker: boolean): number => {\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\n                if (!!inputRawValue) {\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(5, 2));\n                    return value;\n                }\n            },\n            [getInputRawValue]\n        );\n\n        const [customMonth, setCustomMonth] = React.useState<number>(initCustomMonth(value, monthPicker));\n\n        const handleChangeCustomMonth = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n            const v: number = e.target?.value && !Number.isNaN(Number(e.target?.value)) ? Number(e.target.value) : null;\n            setCustomMonth(v);\n        };\n\n        const initCustomYear = React.useCallback(\n            (value: Date, monthPicker: boolean): number => {\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\n                if (!!inputRawValue) {\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(0, 4));\n                    return value;\n                }\n            },\n            [getInputRawValue]\n        );\n\n        const [customYear, setCustomYear] = React.useState<number>(initCustomYear(value, monthPicker));\n\n        const handleChangeCustomYear = (e: React.ChangeEvent<HTMLInputElement>): void => {\n            const v: number = e.target?.value && !Number.isNaN(Number(e.target?.value)) ? Number(e.target.value) : null;\n            setCustomYear(v);\n        };\n\n        React.useEffect(() => {\n            const day: number = monthPicker ? 1 : customDay;\n            const month: number = customMonth;\n            const year: number = customYear;\n            const dateString: string = `${padNumber(year, true)}-${padNumber(month)}-${padNumber(day)}`;\n            const date: Date = new Date(dateString);\n            const m: number = date.getMonth() + 1;\n            if (date.getFullYear() === year && m === month && date.getDate() === day) {\n                isDateInRange(date, min, max) ? onChange(date) : onChange(null);\n            } else {\n                onChange(null);\n            }\n        }, [monthPicker, customDay, customMonth, customYear, min, max]);\n\n        const getRelativeTimeFormat = React.useCallback((code: string): any => {\n            if ((Intl as any)[\"RelativeTimeFormat\"]) {\n                try {\n                    const rtf: any = new (Intl as any).RelativeTimeFormat(code);\n                    if (rtf) {\n                        return rtf;\n                    }\n                } catch (error) {\n                    return null;\n                }\n            }\n            return null;\n        }, []);\n\n        const getLocaleOrDefault = React.useCallback((localeCode: string): Intl.DateTimeFormat => {\n            let locale: Intl.DateTimeFormat;\n            try {\n                locale = new Intl.DateTimeFormat(localeCode, { month: \"long\" });\n            } catch (error) {\n                console.warn(`Locale with code: ${localeCode} was not recognised. Using locale 'en' instead.`);\n                locale = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n            }\n            return locale;\n        }, []);\n\n        const unitNames: UnitNames = {\n            month: \"Month\",\n            day: \"Day\",\n            year: \"Year\",\n        };\n\n        const monthNames = () => {\n            const date: Date = new Date(2012, 0, 5);\n            const locale: Intl.DateTimeFormat = getLocaleOrDefault(localeCode);\n\n            const names: string[] = [unitNames.month];\n            [...Array(12)].map((_, i) => {\n                date.setMonth(i);\n                names.push(locale.format(date));\n            });\n            return names;\n        };\n\n        const customPickerOrder = () => {\n            const date: Date = new Date(2012, 0, 5);\n            const rtf: any = getRelativeTimeFormat(localeCode);\n            let order: string[] = [\"day\", \"month\", \"year\"];\n            const locale: Intl.DateTimeFormat = getLocaleOrDefault(localeCode);\n\n            const localeDateString: string = locale.format(date);\n            order.sort((a, b) => {\n                const positions: { day: number; month: number; year: number } = {\n                    day: localeDateString?.search(/5/g) || 0,\n                    month: localeDateString?.search(/1/g) || 1,\n                    year: localeDateString?.search(/2012/g) || 2,\n                };\n                return positions[a] - positions[b];\n            });\n\n            order?.map((unit) => {\n                unitNames[unit] =\n                    rtf\n                        ?.formatToParts(1, unit)\n                        ?.filter((x) => x.type === \"literal\")[1]\n                        ?.value?.trim() || unit;\n            });\n\n            return order;\n        };\n\n        const supportsInputOfType = (type: \"date\" | \"month\"): boolean => {\n            if (typeof document !== \"undefined\") {\n                const input: HTMLInputElement = document.createElement(\"input\");\n                input.setAttribute(\"type\", type);\n\n                const notADateValue: string = \"not-a-date\";\n                input.setAttribute(\"value\", notADateValue);\n\n                return input.value !== notADateValue;\n            }\n\n            return false;\n        };\n\n        const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n            const { value: changeEventValue } = e.target;\n            const value: Date = new Date(changeEventValue);\n            onChange(value);\n        };\n\n        const renderCustomDatepicker = (value: Date, monthPicker: boolean, customPickerOrder: string[], unitNames: UnitNames, disabled: boolean, monthNames: string[]) => {\n            const order: string[] = monthPicker ? [...customPickerOrder.filter((x: string) => x !== \"day\")] : customPickerOrder;\n            return (\n                <div {...wrapperProps} ref={ref} className={classnames(\"input-group\", \"seb-datepicker-custom\", wrapperProps?.className)}>\n                    {order?.map((unit: string, unitIndex: number) => {\n                        switch (unit) {\n                            case \"day\":\n                                return (\n                                    <input\n                                        {...props}\n                                        key={unitIndex}\n                                        className={classnames(\"form-control\", \"seb-datepicker-custom-day\", className)}\n                                        type=\"number\"\n                                        min=\"1\"\n                                        max=\"31\"\n                                        placeholder={unitNames.day}\n                                        disabled={disabled}\n                                        value={isDateInRange(value, min, max) ? customDay || \"\" : \"\"}\n                                        onChange={handleChangeCustomDay}\n                                    />\n                                );\n\n                            case \"month\":\n                                return (\n                                    <select\n                                        {...customPickerSelectProps}\n                                        key={unitIndex}\n                                        className={classnames(\n                                            \"custom-select\",\n                                            \"seb-datepicker-custom-month\",\n                                            { \"rounded-left\": unitIndex === 0 },\n                                            { \"rounded-right\": unitIndex === customPickerOrder.length - 1 },\n                                            customPickerSelectProps?.className\n                                        )}\n                                        value={isDateInRange(value, min, max) ? customMonth || \"\" : \"\"}\n                                        disabled={disabled}\n                                        onChange={handleChangeCustomMonth}\n                                    >\n                                        {monthNames.map((month: string, i: number) => {\n                                            return (\n                                                <option key={i} disabled={disabled || i === 0} value={i}>\n                                                    {month}\n                                                </option>\n                                            );\n                                        })}\n                                    </select>\n                                );\n\n                            case \"year\":\n                                return (\n                                    <input\n                                        {...props}\n                                        key={unitIndex}\n                                        className={classnames(\"form-control\", \"seb-datepicker-custom-year\", className)}\n                                        type=\"number\"\n                                        min=\"1\"\n                                        placeholder={unitNames.year}\n                                        disabled={disabled}\n                                        value={isDateInRange(value, min, max) ? customYear || \"\" : \"\"}\n                                        onChange={handleChangeCustomYear}\n                                    />\n                                );\n                            default:\n                                break;\n                        }\n                    })}\n                </div>\n            );\n        };\n\n        if (monthPicker && !forceCustom && supportsInputOfType(\"month\")) {\n            return (\n                <input\n                    {...props}\n                    ref={ref}\n                    type=\"month\"\n                    className={classnames(\"form-control\", \"seb-datepicker-native\", className)}\n                    min={getStringFromDate(min, monthPicker)}\n                    max={getStringFromDate(max, monthPicker)}\n                    value={isDateInRange(value, min, max) ? getInputRawValue(value, monthPicker) : \"\"}\n                    disabled={disabled}\n                    onChange={handleOnChange}\n                />\n            );\n        } else if (!forceCustom && supportsInputOfType(\"date\")) {\n            return (\n                <input\n                    {...props}\n                    ref={ref}\n                    type=\"date\"\n                    className={classnames(\"form-control\", \"seb-datepicker-native\", className)}\n                    min={getStringFromDate(min, monthPicker)}\n                    max={getStringFromDate(max, monthPicker)}\n                    value={isDateInRange(value, min, max) ? getInputRawValue(value, monthPicker) : \"\"}\n                    disabled={disabled}\n                    onChange={handleOnChange}\n                />\n            );\n        } else {\n            return <>{renderCustomDatepicker(value, monthPicker, customPickerOrder(), unitNames, disabled, monthNames())}</>;\n        }\n    }\n);\n","export function padNumber(value: number, isYear: boolean = false): string {\n    if (value != null && value != undefined && isNumber(value)) {\n        const minimumIntegerDigits: number = isYear ? 4 : 2;\n        return value.toLocaleString(\"en\", { minimumIntegerDigits, useGrouping: false });\n    } else {\n        return \"\";\n    }\n}\n\nexport function isNumber(...values: number[]): boolean {\n    return values.every((val) => !isNaN(val));\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./stepper.scss\";\n\nexport type StepperProps = JSX.IntrinsicElements[\"input\"] & {\n    /** Element label */\n    label?: string;\n    /** callback when element value is decreased */\n    onDecrease: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    /** callback when element value is increased */\n    onIncrease: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    /** Feedback indicator */\n    indicator?: Indicator;\n    /** Props for the wrapper element (div) */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n\n/** A stepper makes it easier to input values that are in a narrow range */\nexport const Stepper: React.FC<StepperProps> = React.forwardRef(\n    ({ label, onDecrease, onIncrease, indicator, wrapperProps = {}, ...props }: StepperProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n        const [id, setId] = React.useState<string>(\"\");\n\n        React.useEffect(() => {\n            setId(props.id ? props.id : randomId(\"stepper-\"));\n        }, [props.id]);\n\n        return (\n            <div {...wrapperProps} className={classnames(\"rc custom-stepper\", wrapperProps.className)}>\n                {label && <label className=\"custom-label\">{label}</label>}\n                <FeedbackIndicator {...indicator}>\n                    <div className={\"stepper-container\" + (props.disabled ? \" disabled\" : \"\")}>\n                        <button\n                            className={\"stepper-decrement\" + (props.value === props.min ? \" disabled\" : \"\")}\n                            onClick={props.value > props.min && !props.disabled ? onDecrease : null}\n                            aria-controls={id}\n                            aria-labelledby=\"decrement\"\n                        >\n                            <span>&#8722;</span>\n                        </button>\n                        <div className=\"stepper-preview\">\n                            <span>{props.value}</span>\n                        </div>\n                        <button\n                            className={\"stepper-increment\" + (props.value === props.max ? \" disabled\" : \"\")}\n                            onClick={props.value < props.max && !props.disabled ? onIncrease : null}\n                            aria-controls={id}\n                            aria-labelledby=\"increment\"\n                        >\n                            <span>&#43;</span>\n                        </button>\n                    </div>\n                </FeedbackIndicator>\n                <input {...props} ref={ref} id={id} type=\"number\" readOnly={true} className={classnames(\"stepper-input\", props.className)} aria-live=\"assertive\" />\n            </div>\n        );\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport { RadioButtonProps } from \"./RadioButton\";\n\nexport type RadioGroupProps<T = React.ReactText> = JSX.IntrinsicElements[\"div\"] & {\n    /** The name of the group */\n    name: string;\n    /** Form indicator */\n    indicator?: Indicator;\n    /** Disable the whole group */\n    disabled?: boolean;\n    /** The value of the group */\n    value?: T;\n    /** On change handler */\n    onChange?: React.ChangeEventHandler<HTMLInputElement>;\n};\n/** A radio button allows a user to select a single item from a predefined list of options. Radio buttons are common to use in forms, i.e when you apply for a loan and need to enter \"Yes\" or \"No\". */\nexport const RadioGroup: React.FC<RadioGroupProps> = React.forwardRef(({ name, indicator, disabled, value, onChange, ...props }: RadioGroupProps, ref: React.ForwardedRef<HTMLDivElement>) => (\n    <FeedbackIndicator {...indicator}>\n        <div {...props} ref={ref} className={classnames(\"radio-group\", props.className)}>\n            {React.Children.map(props.children, (Child: React.ReactElement<RadioButtonProps>) =>\n                React.isValidElement<React.FC<RadioButtonProps>>(Child)\n                    ? React.cloneElement<any>(Child, {\n                          checked: value === Child.props.value,\n                          disabled: disabled || Child.props.disabled,\n                          onChange: (e: React.ChangeEvent<HTMLInputElement>) => onChange(e),\n                      })\n                    : Child\n            )}\n        </div>\n    </FeedbackIndicator>\n));\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./radio-button.scss\";\n\nexport type RadioButtonProps<T = React.ReactText> = Omit<JSX.IntrinsicElements[\"input\"], \"value\"> & {\n    /** Radio button value */\n    value?: T;\n    indicator?: Indicator;\n    /** Props for the div wrapper around the radio input element */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n/** A radio button allows a user to select a single item from a predefined list of options. Radio buttons are common to use in forms, i.e when you apply for a loan and need to enter \"Yes\" or \"No\". */\nexport const RadioButton: React.FC<RadioButtonProps> = React.forwardRef(({ children, indicator, wrapperProps = {}, ...props }: RadioButtonProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n    const [id, setId] = React.useState<string>(\"\");\n\n    React.useEffect(() => setId(props.id || randomId(\"radiobtn-\")), [props.id]);\n\n    return (\n        <FeedbackIndicator {...indicator}>\n            <div {...wrapperProps} className={classnames(\"rc radio-button\", wrapperProps.className)}>\n                <div className=\"rc custom-radio custom-control\">\n                    <input {...props} ref={ref} className={classnames(\"custom-control-input\", props.className)} type=\"radio\" id={id} />\n                    {children && (\n                        <label className=\"custom-control-label\" htmlFor={id}>\n                            {children}\n                        </label>\n                    )}\n                </div>\n            </div>\n        </FeedbackIndicator>\n    );\n});\n"],"sourceRoot":""}