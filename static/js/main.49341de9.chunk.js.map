{"version":3,"sources":["assets/language/lang-en.ts","assets/language/lang-sw.ts","providers/LanguageProvider.tsx","components/Header.tsx","providers/WizardProvider.tsx","utils/customHooks.ts","providers/LoaderProvider.tsx","providers/NotificationsProvider.tsx","components/Sidebar.tsx","components/NoMatch.tsx","components/LanguageSwitcher.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["english","appName","routeNames","home","components","wizard","about","cards","loader","title","subtitle","description","buttonTexts","footerMessage","seconds","notifications","message","messageText","type","typeError","typeWarning","pages","note","swedish","getLanguageResource","code","LanguageContext","createContext","toggleCode","resource","useLanguageContext","loaderContext","useContext","LanguageProvider","props","useState","setCode","useMemo","Provider","value","state","children","Header","d1","d2","d3","h1","h2","h3","lead","theme","themeClassName","useCallback","container","text","getClassNameForTheme","className","map","val","i","WizardContext","sectionA","setSectionA","sectionB","setSectionB","sectionC","setSectionC","sectionD","setSectionD","WizardProvider","useWizardContext","useCommonMedia","gridBreakPoints","breakpoint","label","mediaQueries","sizeNames","defaultSizeName","mediaQueryLists","query","window","matchMedia","getValue","React","index","findIndex","mql","matches","setValue","handler","forEach","addListener","removeListener","useMedia","reverse","gbp","LoaderContext","loading","toggleLoading","useLoaderContext","LoaderProvider","setLoading","toggle","fullscreen","backdrop","NotificationsContext","addNotification","useNotificationsContext","NotificationsProvider","maxNotifications","setNotification","removeNotificationAtIndex","slice","useEffect","length","notification","ref","createRef","Fragment","id","persist","onDismiss","onAnimationEnd","current","style","animation","bottom","Sidebar","routes","mobile","searchable","open","setOpen","toggleClickMenu","Separator","memo","gridArea","zIndex","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","position","overflowY","height","item","to","path","activeClassName","NoMatch","rootContainerStyle","display","gridTemplateRows","sidebarHeaderHeight","gridTemplateColumns","gridTemplateAreas","width","top","right","backgroundPositionY","clipPath","maxHeight","xmlns","viewBox","d","LanguageSwitcher","size","Home","lazy","Wizard","App","deviceSize","component","gridAreas","AppLoading","basename","process","fallback","route","from","exact","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iLAgDeA,EA9Cc,CAC3BC,QAAS,iBACTC,WAAY,CACVC,KAAM,OACNC,WAAY,aACZC,OAAQ,SACRC,MAAO,SAETF,WAAY,CACVD,KAAM,CACJI,MAAO,CACLC,OAAQ,CACNC,MAAO,SACPC,SAAU,4BACVC,YACE,8QACFC,YAAa,CAAC,sBACdC,cAAe,6DACfC,QAAS,WAEXC,cAAe,CACbN,MAAO,gBACPC,SAAU,mCACVC,YACE,4LACFC,YAAa,CAAC,qBACdC,cAAe,4CACfG,QAAS,wBACTC,YAAa,qBACbC,KAAM,qBACNC,UAAW,QACXC,YAAa,WAEfC,MAAO,CACLZ,MAAO,cACPC,SAAU,qBACVC,YAAa,sEACbW,KACE,+GACFV,YAAa,CAAC,iBCMTW,EA7Cc,CAC3BtB,QAAS,gBACTC,WAAY,CACVC,KAAM,MACNC,WAAY,cACZC,OAAQ,YACRC,MAAO,aAETF,WAAY,CACVD,KAAM,CACJI,MAAO,CACLC,OAAQ,CACNC,MAAO,UACPC,SAAU,6BACVC,YACE,mVACFC,YAAa,CAAC,wBACdC,cAAe,uEACfC,QAAS,YAEXC,cAAe,CACbN,MAAO,cACPC,SAAU,oCACVC,YACE,sJACFC,YAAa,CAAC,qBACdC,cAAe,+BACfG,QAAS,cACTC,YAAa,sBACbC,KAAM,iBACNC,UAAW,MACXC,YAAa,WAEfC,MAAO,CACLZ,MAAO,YACPC,SAAU,mBACVC,YAAa,6EACbW,KAAM,2GACNV,YAAa,CAAC,iB,OC7BXY,EAA+E,SAACC,GAC3F,OAAQA,GACN,IAAK,KACH,OAAOzB,EACT,IAAK,KACH,OAAOuB,EACT,QACE,OAAOvB,IAUA0B,EAA2DC,wBAAwC,CAC9GF,KAAM,KACNG,WAAY,aACZC,SAAUL,EAAoB,QAwBnBM,EAA+C,WAC1D,IAAMC,EAAgBC,qBAAWN,GACjC,MAAO,CAACK,EAAcF,SAAUE,EAAcN,KAAMM,EAAcH,aAGrDK,IA1BoB,SAACC,GAAW,IAAD,EACpBC,mBAA2C,MADvB,mBACrCV,EADqC,KAC/BW,EAD+B,KAMtCP,EAAwBQ,mBAAQ,kBAAMb,EAAoBC,KAAO,CAACA,IAExE,OACE,cAACC,EAAgBY,SAAjB,CACEC,MAAO,CACLd,OACAG,WAVqD,WACzDQ,GAAQ,SAACI,GAAD,MAAwD,OAAVA,EAAiB,KAAO,SAU1EX,YAJJ,SAOGK,EAAMO,a,gCClDb,kBAuDeC,IA1CuB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,GAAIC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAkB/DC,EAdFC,uBAAY,WACd,OAAIF,EACK,CACLG,UAAU,gBAAD,OAAkBH,EAAlB,YACTI,KAAgB,cAAVJ,GAAmC,YAAVA,EAAsB,YAAc,cAIhE,CACLG,UAAU,YACVC,KAAM,gBAEP,CAACJ,GAEmBK,GAEvB,OACE,0BAASC,UAAWL,EAAeE,UAAnC,UACG,CAACV,EAAIC,EAAIC,GAAIY,KAAI,SAACC,EAAyBC,GAA1B,OAChBD,EACE,oBAAYF,UAAS,kBAAaG,EAAI,EAAjB,YAAsBR,EAAeG,MAA1D,SACGI,GADMC,GAGP,QAELb,EAAK,oBAAIU,UAAWL,EAAeG,KAA9B,SAAqCR,IAAW,KACrDC,EAAK,oBAAIS,UAAWL,EAAeG,KAA9B,SAAqCP,IAAW,KACrDC,EAAK,oBAAIQ,UAAWL,EAAeG,KAA9B,SAAqCN,IAAW,KACrDC,EACC,qCACE,oBAAIO,UAAU,SACd,mBAAGA,UAAS,mBAAcL,EAAeG,MAAzC,SAAkDL,OAElD,U,qICpCGW,EAAgBjC,wBAAiC,CAC5DkC,SAAU,GACVC,YAAa,aACbC,SAAU,GACVC,YAAa,aACbC,SAAU,GACVC,YAAa,aACbC,SAAU,GACVC,YAAa,eAGFC,EAA2B,SAAC,GAAkB,IAAhB5B,EAAe,EAAfA,SAAe,EACxBN,mBAAmC,IADX,mBACjD0B,EADiD,KACvCC,EADuC,OAExB3B,mBAAmC,IAFX,mBAEjD4B,EAFiD,KAEvCC,EAFuC,OAGxB7B,mBAAmC,IAHX,mBAGjD8B,EAHiD,KAGvCC,EAHuC,OAIxB/B,mBAAmC,IAJX,mBAIjDgC,EAJiD,KAIvCC,EAJuC,KAMxD,OACE,cAACR,EAActB,SAAf,CACEC,MAAO,CACLsB,SAAS,eAAMA,GACfC,YAAa,SAACvB,GAAD,OAAgBuB,EAAYvB,IACzCwB,SAAS,eAAMA,GACfC,YAAa,SAACzB,GAAD,OAAgByB,EAAYzB,IACzC0B,SAAS,eAAMA,GACfC,YAAa,SAAC3B,GAAD,OAAgB2B,EAAY3B,IACzC4B,SAAS,eAAMA,GACfC,YAAa,SAAC7B,GAAD,OAAgB6B,EAAY7B,KAT7C,SAYGE,KAKM6B,EAAmB,WAE9B,OADYtC,qBAAW4B,K,oFChClB,SAASW,IACd,IAAMC,EAAyC,CAC7C,CACEC,WAAY,MACZC,MAAO,UAET,CACED,WAAY,QACZC,MAAO,oBAET,CACED,WAAY,QACZC,MAAO,UAET,CACED,WAAY,QACZC,MAAO,WAET,CACED,WAAY,SACZC,MAAO,iBAcX,OAUK,SACLC,EACAC,EACAC,GAGA,IAAMC,EAAyCH,EAAalB,KAC1D,SAACsB,GAAD,OAAmBC,OAAOC,WAAWF,MAIjCG,EAAoBC,eAAkB,WAE1C,IAAMC,EAAgBN,EAAgBO,WAAU,SAAAC,GAAG,OAAIA,EAAIC,WAE3D,MAAmC,qBAArBX,EAAUQ,GACpBR,EAAUQ,GACVP,IACH,CAACC,EAAiBF,EAAWC,IAd7B,EAiBuBM,WAAeD,GAjBtC,mBAiBI3C,EAjBJ,KAiBWiD,EAjBX,KAqCH,OAlBAL,aACE,WAME,IAAMM,EAAsB,kBAAYD,EAASN,IAMjD,OAJAJ,EAAgBY,SAAQ,SAACJ,GAAD,OACtBA,EAAIK,YAAYF,MAGX,kBAAMX,EAAgBY,SAAQ,SAAAJ,GAAG,OAAIA,EAAIM,eAAeH,SAEjE,CAACX,EAAiBI,IAGb3C,EAnDAsD,CAPwBrB,EAC5BsB,UACArC,KALwD,SACzDsC,GADyD,4BAEvCA,EAAItB,WAFmC,QAMzBD,EAAgBf,KAChD,SAACsC,GAAD,OAAyBA,EAAIrB,SAGEF,EAAgB,GAAGE,S,mGC1CzCsB,EAAuDrE,wBAAsC,CACxGsE,SAAS,EACTC,cAAe,eAsBJC,EAA2C,WACtD,IAAMpE,EAAgBC,qBAAWgE,GACjC,MAAO,CAACjE,EAAckE,QAASlE,EAAcmE,gBAGhCE,IAxBkB,SAAClE,GAAW,IAAD,EACZC,oBAA4C,GADhC,mBACnC8D,EADmC,KAC1BI,EAD0B,KAM1C,OACE,eAACL,EAAc1D,SAAf,CACEC,MAAO,CACL0D,UACAC,cARyD,WAC7DG,GAAW,SAAC7D,GAAD,OAAYA,OAIvB,UAME,cAAC,IAAD,CAAQgB,UAAU,gBAAgB8C,OAAQL,EAASM,YAAU,EAACC,UAAQ,IACrEtE,EAAMO,c,oHCdAgE,EAAqE9E,wBAEhF,CAAE+E,gBAAiB,eAuDRC,EAAyD,WAEpE,MAAO,CADqB3E,qBAAWyE,GACXC,kBAGfE,IA1D2E,SAAC,GAGpF,IAAD,IAFJC,wBAEI,MAFe,GAEf,EADJpE,EACI,EADJA,SACI,EACqCN,mBAAyB,IAD9D,mBACGpB,EADH,KACkB+F,EADlB,KAMEC,EAA4B,SAAC3B,GACjC0B,EAAgB,GAAD,mBAAK/F,EAAciG,MAAM,EAAG5B,IAA5B,YAAuCrE,EAAciG,MAAM5B,EAAQ,OASpF,OANAD,IAAM8B,WAAU,WACVlG,EAAcmG,OAASL,GACzBE,EAA0B,KAE3B,CAAChG,EAAe8F,IAGjB,eAACJ,EAAqBnE,SAAtB,CACEC,MAAO,CACLmE,gBAjBoE,SAACS,GACzEL,GAAgB,SAACtE,GAAD,4BAAeA,GAAf,CAAsB2E,SActC,UAKGpG,EAAc0C,KAAI,SAAC0D,EAA4B/B,GAC9C,IAAMgC,EAAMjC,IAAMkC,YAClB,OACE,cAAC,IAAMC,SAAP,UACE,eAAC,eAAD,CACEC,GAAE,uBAAkBnC,GACpBgC,IAAKA,EACLI,SAAO,EACPlB,QAAM,EACNpD,MAAOiE,EAAajE,MACpBuE,UAAW,kBAAMV,EAA0B3B,IAC3CsC,eAAgB,WAEbN,EAAIO,QAA2BC,MAAMC,UAAtC,0CACCT,EAAIO,QAA2BC,MAAME,OAAtC,UAA4D,IAAV1C,EAAc,OAFrC,IAE+CA,EAAQ,GAAlF,OAVJ,UAaE,qBAAK5B,UAAU,sBAAf,SAAsC2D,EAAanG,UACnD,qBAAKwC,UAAU,oBAAf,SAAoC2D,EAAaxG,kBAfhCyE,MAoBxB3C,O,wKCaQsF,EArEyB,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,WAA+B,EACtDpG,cADsD,sBAC/E7B,EAD+E,EAC/EA,QAASC,EADsE,EACtEA,WADsE,EAEhEiC,oBAAS,GAFuD,mBAEjFgG,EAFiF,KAE3EC,EAF2E,KAGlFC,EAAkBjF,uBAAY,kBAAMgF,GAAQ,SAAC5F,GAAD,OAAYA,OAAQ,IAEhE8F,EAAoDC,gBAAK,gBAAGrH,EAAH,EAAGA,KAAH,OAAc,oBAAIsC,UAAS,cAAStC,EAAT,WAE1F,OACE,wBAAO0G,MAAO,CAAEY,SAAU,QAASC,OAAQ,GAAKjF,UAAU,wBAA1D,UACE,sBAAKA,UAAU,4CAAf,UACE,sBAAMA,UAAU,eAAhB,SAAgCvD,IAC/BgI,EACC,wBACEzE,UAAU,iBACVtC,KAAK,SACLwH,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,oBACXC,QAASV,EARX,SAUE,sBAAM7E,UAAU,0BAGhB,QAGN,sBACEA,UAAS,kBAAayE,EAAS,QAAU,IACzCL,MAAO,CACLoB,SAAUf,EAAS,WAAa,WAChCgB,UAAW,OACXC,OAAQjB,IAAWE,EAAO,EAAI,WALlC,UAQE,cAACG,EAAD,CAAWpH,KAAK,OAEfgH,GACC,yBAAS1E,UAAU,mBAAnB,SACE,qDAIJ,cAAC8E,EAAD,CAAWpH,KAAK,OAEhB,yBAASsC,UAAU,cAAnB,SACE,oBAAIA,UAAU,WAAd,SACGwE,EAAOvE,KAAI,SAAC0F,GAAD,OACV,oBAAoB3F,UAAU,6BAA9B,SACE,cAAC,UAAD,CACEA,UAAU,sBACV4F,GAAID,EAAKE,KACTC,gBAAgB,yBAChBP,QAASV,EAJX,SAMGnI,EAAWiJ,EAAK1I,UAPZ0I,EAAKE,aAcpB,cAACf,EAAD,CAAWpH,KAAK,c,QCKTqI,EA5EW,WACxB,IAEMC,EAAoE,CACxER,SAAU,WACVS,QAAS,OACTC,iBAAiB,GAAD,OALkB,GAKlB,2BAA2CC,IAA3C,eALkB,GAKlB,MAChBC,oBAAoB,OACpBC,kBAAkB,8DAiBpB,OACE,qCACE,sBAAMjC,MAZqE,CAC7EoB,SAAU,QACVc,MAAO,IACPC,IAAK,EACLC,MAAO,EACPd,OAAQ,IACRe,qBAAsB,IACtBC,SAAU,2CAK6B1G,UAAU,uBAE/C,sBAAKoE,MAAO4B,EAAZ,UACE,qBAAK5B,MAAO,CAAEY,SAAU,UAAYhF,UAAU,SAA9C,SACE,sBAAMA,UAAU,mBAElB,sBAAMoE,MAAO,CAAEY,SAAU,OAAQS,UAAW,QAAUzF,UAAU,4BAAhE,SACE,sBAAKA,UAAU,iBAAiBoE,MAAO,CAAEuC,UAAW,QAApD,UACE,qBAAK3G,UAAU,MAAf,SACE,sBAAKA,UAAU,eAAf,UACE,sBAAK+D,GAAG,cAAc6C,MAAM,6BAA6BC,QAAQ,cAAcP,MAAM,OAArF,UACE,sBAAMQ,EAAE,mRACR,sBAAMA,EAAE,wGACR,sBAAMA,EAAE,wHAEV,iGAGJ,sBAAK9G,UAAU,sBAAf,UACE,sBAAKA,UAAU,SAAf,UACE,mBAAGA,UAAU,aAAb,4BACA,uBACA,2JAIA,uBACA,cAAC,UAAD,CAAS4F,GAAI,IAAb,6BAEF,sBAAK5F,UAAU,SAAf,UACE,uBACA,wBAAQA,UAAU,eAAlB,yBAEF,sBAAKA,UAAU,SAAf,UACE,uBACA,wBAAQA,UAAU,eAAlB,iCAKR,sBAAKoE,MAAO,CAAEY,SAAU,UAAYhF,UAAU,SAA9C,UACE,sEACA,qD,gCCzDK+G,EAXoB,WAAO,IAAD,EACVzI,cADU,mBAC9BL,EAD8B,KACxBG,EADwB,KAEvC,OACE,qBAAK4B,UAAU,MAAMoE,MAAO,CAAEoB,SAAU,QAASgB,MAAO,EAAGD,IAAK,EAAGtB,OAAQ,GAA3E,SACE,cAAC,IAAD,CAAQ+B,KAAK,KAAKjD,GAAG,gBAAgBwB,QAAS,kBAAMnH,KAAcsB,MAAM,OAAxE,SACY,OAATzB,EAAgB,KAAO,UCM1BgJ,EAAOC,gBAAK,kBAAM,iCAClBC,EAASD,gBAAK,kBAAM,iCAsHXE,EA5GO,WACpB,IAAMC,EAAyBtG,cAEzByD,EAAgC,CACpC,CAAEqB,KAAM,QAAS5I,MAAO,OAAQqK,UAAW,cAACL,EAAD,IAAUvH,MAAO,WAC5D,CAAEmG,KAAM,UAAW5I,MAAO,SAAUqK,UAAW,cAACH,EAAD,IAAYzH,MAAO,WAMlE,CACEmG,KAAM,SACN5I,MAAO,QACPqK,UAAW,cAACpI,EAAA,EAAD,CAAQG,GAAG,QAAQI,KAAK,+BAA+BC,MAAM,WAKtE6H,EAA0B3H,uBAAY,WAC1C,OAAQyH,GACN,IAAK,SACL,IAAK,mBACH,MAAM,wEAIR,QACE,MAAM,0EAKT,CAACA,IAEEjB,EAAoCxG,uBAAY,WACpD,OAAQyH,GACN,IAAK,SACH,MAAO,kBACT,IAAK,UACH,MAAO,kBACT,IAAK,eACH,MAAO,kBACT,QACE,MAAO,oBAEV,CAACA,IAEE5C,EAAkB5F,mBAAQ,iBAAqB,WAAfwI,GAA0C,qBAAfA,IAAmC,CAACA,IAE/FrB,EAAqB,CACzBC,QAAS,OACTC,iBAAiB,GAAD,OAnCkB,GAmClB,2BAnCkB,GAmClB,OAChBE,oBAAqBA,IACrBC,kBAAmBkB,KAGfC,EAAuB,kBAC3B,sBAAKxH,UAAW,iBAAkBoE,MAAO4B,EAAzC,UACE,cAAC,EAAD,CAASvB,OAAQA,EAAQD,OAAQ,GAAIE,YAAY,IACjD,uBAAMN,MAAO,CAAEY,SAAU,OAAQS,UAAW,QAA5C,UACE,cAACvG,EAAA,EAAD,CAAQQ,MAAM,cACd,qBAAKM,UAAU,2BAKrB,OACE,cAACvB,EAAA,EAAD,UACE,eAACoC,EAAA,EAAD,WACE,cAAC,EAAD,IACA,cAAC,gBAAD,CAAe4G,SAAUC,kBAAzB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO7B,KAAK,WAAZ,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAACjD,EAAA,EAAD,UACE,cAACQ,EAAA,EAAD,UACE,cAAC,WAAD,CAAUuE,SAAU,cAACH,EAAD,IAApB,SACE,sBAAKxH,UAAW,0BAA2BoE,MAAO4B,EAAlD,UACE,cAAC,EAAD,CAASvB,OAAQA,EAAQD,OAAQA,EAAQE,YAAU,IACnD,sBAAMN,MAAO,CAAEY,SAAU,OAAQS,UAAW,QAA5C,SACE,eAAC,IAAD,WACGjB,EAAOvE,KAAI,SAAC2H,EAAuBzH,GAClC,OACE,cAAC,IAAD,CAAe0F,KAAM+B,EAAM/B,KAA3B,SACG+B,EAAMN,WADGnH,MAKhB,cAAC,IAAD,CAAU0H,KAAK,IAAIC,OAAK,EAAClC,GAAIpB,EAAO,GAAGqB,OACvC,cAAC,IAAD,CAAUgC,KAAK,IAAIjC,GAAI,wCC3G7BmC,QACW,cAA7BvG,OAAOwG,SAASC,UAEe,UAA7BzG,OAAOwG,SAASC,UAEhBzG,OAAOwG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.49341de9.chunk.js","sourcesContent":["import { AppLanguage } from \"../../models/language\";\n\nconst english: AppLanguage = {\n  appName: \"React examples\",\n  routeNames: {\n    home: \"Home\",\n    components: \"Components\",\n    wizard: \"Wizard\",\n    about: \"About\"\n  },\n  components: {\n    home: {\n      cards: {\n        loader: {\n          title: \"Loader\",\n          subtitle: \"Global application loader\",\n          description:\n            \"The app includes a global fullscreen opaque overlay application loader which will block the user from accessing the UI beneath it. You can use this loader when the application state is transitioning, for exapmle, during authentication. Test it using the button below.\",\n          buttonTexts: [\"Test global loader\"],\n          footerMessage: \"Adjust how many seconds the global loader should spin for:\",\n          seconds: \"Seconds\"\n        },\n        notifications: {\n          title: \"Notifications\",\n          subtitle: \"Global application notifications\",\n          description:\n            \"Any react component can simply trigger a notification. If multiple notifications are triggered they appear stacked. This stack is configured for max 10 notifications but can be changed.\",\n          buttonTexts: [\"Test notification\"],\n          footerMessage: \"Adjust the notification message and type:\",\n          message: \"Notification message:\",\n          messageText: \"Example body text.\",\n          type: \"Notification type:\",\n          typeError: \"Error\",\n          typeWarning: \"Warning\"\n        },\n        pages: {\n          title: \"Error Pages\",\n          subtitle: \"Global error pages\",\n          description: \"The app includes global error pages to handle 404 and other errors.\",\n          note:\n            \"The below link will navigate you to a fake url which will trigger the router to redirect you to the 404 page\",\n          buttonTexts: [\"Test 404\"]\n        }\n      }\n    }\n  }\n};\n\nexport default english;\n","import { AppLanguage } from \"../../models/language\";\n\nconst swedish: AppLanguage = {\n  appName: \"React exempel\",\n  routeNames: {\n    home: \"Hem\",\n    components: \"Komponenter\",\n    wizard: \"Trollkarl\",\n    about: \"Handla om\"\n  },\n  components: {\n    home: {\n      cards: {\n        loader: {\n          title: \"Lastare\",\n          subtitle: \"Global applikationslastare\",\n          description:\n            \"Appen innehåller en global fullskärms ogenomskinlig overlay-applikationslastare som kommer att hindra användaren från att komma åt användargränssnittet under den. Du kan använda den här laddaren när applikationstillståndet övergår, för exapmle, under autentisering. Testa det med knappen nedan.\",\n          buttonTexts: [\"Testa global lastare\"],\n          footerMessage: \"Justera hur många sekunder den globala lastaren ska snurra på:\",\n          seconds: \"Sekunder\"\n        },\n        notifications: {\n          title: \"Aviseringar\",\n          subtitle: \"Aviseringar om global applikation\",\n          description:\n            \"Appen innehåller ett globalt anmälningssystem. En reaktionskomponent kan utlösa ett meddelande från vilken plats som helst i trädet.\",\n          buttonTexts: [\"Testa aviseringar\"],\n          footerMessage: \"Justera meddelandet och typ:\",\n          message: \"Meddelande:\",\n          messageText: \"Exempel på text.\",\n          type: \"Meddelandetyp:\",\n          typeError: \"Fel\",\n          typeWarning: \"Varning\"\n        },\n        pages: {\n          title: \"Fel sidor\",\n          subtitle: \"Globala felsidor\",\n          description: \"Appen innehåller globala felsidor för att hantera 404 och andra fel.\",\n          note: \"Länken nedan navigerar dig till en falsk url som utlöser routern att omdirigera dig till 404-sidan\",\n          buttonTexts: [\"Test 404\"]\n        }\n      }\n    }\n  }\n};\n\nexport default swedish;\n","import React, { createContext, useState, useContext, useMemo } from \"react\";\nimport { AppLanguage } from \"../models/language\";\nimport english from \"../assets/language/lang-en\";\nimport swedish from \"../assets/language/lang-sw\";\n\nexport interface LanguageContextInterface {\n  code: \"EN\" | \"SW\";\n  toggleCode: () => void;\n  resource: AppLanguage;\n}\n\nexport const getLanguageResource: (code: LanguageContextInterface[\"code\"]) => AppLanguage = (code): AppLanguage => {\n  switch (code) {\n    case \"EN\":\n      return english;\n    case \"SW\":\n      return swedish;\n    default:\n      return english;\n  }\n};\n\nexport type UseLanguageContext = [\n  LanguageContextInterface[\"resource\"],\n  LanguageContextInterface[\"code\"],\n  LanguageContextInterface[\"toggleCode\"]\n];\n\nexport const LanguageContext: React.Context<LanguageContextInterface> = createContext<LanguageContextInterface>({\n  code: \"EN\",\n  toggleCode: () => {},\n  resource: getLanguageResource(\"EN\")\n});\n\nconst LanguageProvider: React.FC = (props) => {\n  const [code, setCode] = useState<LanguageContextInterface[\"code\"]>(\"EN\");\n  const toggleCode: LanguageContextInterface[\"toggleCode\"] = () => {\n    setCode((state: LanguageContextInterface[\"code\"]) => (state === \"EN\" ? \"SW\" : \"EN\"));\n  };\n\n  const resource: AppLanguage = useMemo(() => getLanguageResource(code), [code]);\n\n  return (\n    <LanguageContext.Provider\n      value={{\n        code,\n        toggleCode,\n        resource\n      }}\n    >\n      {props.children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguageContext: () => UseLanguageContext = () => {\n  const loaderContext = useContext(LanguageContext);\n  return [loaderContext.resource, loaderContext.code, loaderContext.toggleCode];\n};\n\nexport default LanguageProvider;\n","import React, { useCallback } from \"react\";\n\nexport interface HeaderProps {\n  d1?: string;\n  d2?: string;\n  d3?: string;\n  h1?: string;\n  h2?: string;\n  h3?: string;\n  lead?: string;\n  theme?: \"primary\" | \"secondary\" | \"success\" | \"info\" | \"warning\" | \"danger\";\n}\n\nconst Header: React.FC<HeaderProps> = ({ d1, d2, d3, h1, h2, h3, lead, theme }) => {\n  const getClassNameForTheme: () => {\n    container: string;\n    text: string;\n  } = useCallback(() => {\n    if (theme) {\n      return {\n        container: `jumbotron bg-${theme}-element`,\n        text: theme === \"secondary\" || theme === \"warning\" ? \"text-dark\" : \"text-light\"\n      };\n    }\n\n    return {\n      container: `jumbotron`,\n      text: \"text-light\"\n    };\n  }, [theme]);\n\n  const themeClassName = getClassNameForTheme();\n\n  return (\n    <section className={themeClassName.container}>\n      {[d1, d2, d3].map((val: string | undefined, i: number) =>\n        val ? (\n          <h1 key={i} className={`display-${i + 1} ${themeClassName.text}`}>\n            {val}\n          </h1>\n        ) : null\n      )}\n      {h1 ? <h1 className={themeClassName.text}>{h1}</h1> : null}\n      {h2 ? <h2 className={themeClassName.text}>{h2}</h2> : null}\n      {h3 ? <h3 className={themeClassName.text}>{h3}</h3> : null}\n      {lead ? (\n        <>\n          <hr className=\"my-4\" />\n          <p className={`lead m-0 ${themeClassName.text}`}>{lead}</p>\n        </>\n      ) : null}\n    </section>\n  );\n};\n\nexport default Header;\n","import React, { createContext, useContext, useState } from \"react\";\n\ntype WizardContextSectionType = { [k: string]: any };\nexport type WizardContextType = {\n  sectionA?: WizardContextSectionType;\n  setSectionA: (value: any) => void;\n  sectionB?: WizardContextSectionType;\n  setSectionB: (value: any) => void;\n  sectionC?: WizardContextSectionType;\n  setSectionC: (value: any) => void;\n  sectionD?: WizardContextSectionType;\n  setSectionD: (value: any) => void;\n};\n\nexport const WizardContext = createContext<WizardContextType>({\n  sectionA: {},\n  setSectionA: () => {},\n  sectionB: {},\n  setSectionB: () => {},\n  sectionC: {},\n  setSectionC: () => {},\n  sectionD: {},\n  setSectionD: () => {}\n});\n\nexport const WizardProvider: React.FC = ({ children }) => {\n  const [sectionA, setSectionA] = useState<WizardContextSectionType>({});\n  const [sectionB, setSectionB] = useState<WizardContextSectionType>({});\n  const [sectionC, setSectionC] = useState<WizardContextSectionType>({});\n  const [sectionD, setSectionD] = useState<WizardContextSectionType>({});\n\n  return (\n    <WizardContext.Provider\n      value={{\n        sectionA: { ...sectionA },\n        setSectionA: (value: any) => setSectionA(value),\n        sectionB: { ...sectionB },\n        setSectionB: (value: any) => setSectionB(value),\n        sectionC: { ...sectionC },\n        setSectionC: (value: any) => setSectionC(value),\n        sectionD: { ...sectionD },\n        setSectionD: (value: any) => setSectionD(value)\n      }}\n    >\n      {children}\n    </WizardContext.Provider>\n  );\n};\n\nexport const useWizardContext = () => {\n  const ctx = useContext(WizardContext);\n  return ctx;\n};\n","import * as React from \"react\";\n\nexport type GridBreakpoint = {\n  breakpoint: string;\n  label: DeviceType;\n};\n\nexport type DeviceType =\n  | \"mobile\"\n  | \"landscape-mobile\"\n  | \"tablet\"\n  | \"desktop\"\n  | \"wide-desktop\";\n\n/**\n * Custom Common Media Query hook\n * @returns information on the current size of the device\n */\nexport function useCommonMedia(): DeviceType {\n  const gridBreakPoints: Array<GridBreakpoint> = [\n    {\n      breakpoint: \"0px\",\n      label: \"mobile\"\n    },\n    {\n      breakpoint: \"576px\",\n      label: \"landscape-mobile\"\n    },\n    {\n      breakpoint: \"768px\",\n      label: \"tablet\"\n    },\n    {\n      breakpoint: \"992px\",\n      label: \"desktop\"\n    },\n    {\n      breakpoint: \"1200px\",\n      label: \"wide-desktop\"\n    }\n  ];\n\n  const breakpointToQuery: (gbp: GridBreakpoint) => string = (\n    gbp: GridBreakpoint\n  ) => `(min-width: ${gbp.breakpoint})`;\n  const queries: Array<string> = gridBreakPoints\n    .reverse()\n    .map(breakpointToQuery);\n  const labels: Array<DeviceType> = gridBreakPoints.map(\n    (gbp: GridBreakpoint) => gbp.label\n  );\n\n  return useMedia(queries, labels, gridBreakPoints[0].label);\n}\n\n/**\n * Custom Hook to utilize media queries in your component logic\n * @param mediaQueries Array of queries\n * @param sizeNames Array of expected responses based on the queries array\n * @param defaultSizeName default value to return if any of the queries are true and the values array is not defined\n * @returns response from values array based on which query matches or defaultValue\n */\nexport function useMedia<T>(\n  mediaQueries: Array<string>,\n  sizeNames: Array<T>,\n  defaultSizeName: T\n): T {\n  /** Array containing a media query list for each query */\n  const mediaQueryLists: Array<MediaQueryList> = mediaQueries.map(\n    (query: string) => window.matchMedia(query)\n  );\n\n  /** Function that gets value based on matching media query */\n  const getValue: () => T = React.useCallback((): T => {\n    // Get index of first media query that matches\n    const index: number = mediaQueryLists.findIndex(mql => mql.matches);\n    // Return related value or defaultValue if none\n    return typeof sizeNames[index] !== \"undefined\"\n      ? sizeNames[index]\n      : defaultSizeName;\n  }, [mediaQueryLists, sizeNames, defaultSizeName]);\n\n  /** State and setter for matched value */\n  const [value, setValue] = React.useState(getValue);\n\n  React.useEffect(\n    () => {\n      /**\n       * Event listener callback\n       * Note: By defining getValue outside of useEffect we ensure that it has\n       * current values of hook args (as this hook callback is created once on mount).\n       */\n      const handler: () => void = (): void => setValue(getValue);\n      // Set a listener for each media query with above handler as callback.\n      mediaQueryLists.forEach((mql: MediaQueryList) =>\n        mql.addListener(handler)\n      );\n      // Remove listeners on cleanup\n      return () => mediaQueryLists.forEach(mql => mql.removeListener(handler));\n    },\n    [mediaQueryLists, getValue] // Empty array ensures effect is only run on mount and unmount\n  );\n\n  return value;\n}\n","import React, { createContext, useState, useContext } from \"react\";\nimport { Loader } from \"@sebgroup/react-components\";\n\nexport interface LoaderContextInterface {\n  loading: boolean;\n  toggleLoading: () => void;\n}\n\nexport type UseLoaderContext = [LoaderContextInterface[\"loading\"], LoaderContextInterface[\"toggleLoading\"]];\n\nexport const LoaderContext: React.Context<LoaderContextInterface> = createContext<LoaderContextInterface>({\n  loading: false,\n  toggleLoading: () => {}\n});\n\nconst LoaderProvider: React.FC = (props) => {\n  const [loading, setLoading] = useState<LoaderContextInterface[\"loading\"]>(false);\n  const toggleLoading: LoaderContextInterface[\"toggleLoading\"] = () => {\n    setLoading((state) => !state);\n  };\n\n  return (\n    <LoaderContext.Provider\n      value={{\n        loading,\n        toggleLoading\n      }}\n    >\n      <Loader className=\"global-loader\" toggle={loading} fullscreen backdrop />\n      {props.children}\n    </LoaderContext.Provider>\n  );\n};\n\nexport const useLoaderContext: () => UseLoaderContext = () => {\n  const loaderContext = useContext(LoaderContext);\n  return [loaderContext.loading, loaderContext.toggleLoading];\n};\n\nexport default LoaderProvider;\n","import React, { createContext, useState, useContext, PropsWithChildren } from \"react\";\nimport { NotificationProps, Notification } from \"@sebgroup/react-components/Notification\";\n\nexport interface Notification {\n  message: string;\n  description: string;\n  theme?: NotificationProps[\"theme\"];\n}\n\nexport interface NotificationsContextInterface {\n  addNotification: (notification: Notification) => void;\n}\n\nexport type UseNotificationsContext = [NotificationsContextInterface[\"addNotification\"]];\n\nexport const NotificationsContext: React.Context<NotificationsContextInterface> = createContext<\n  NotificationsContextInterface\n>({ addNotification: () => {} });\n\nconst NotificationsProvider: React.FC<PropsWithChildren<{ maxNotifications?: number }>> = ({\n  maxNotifications = 10,\n  children\n}) => {\n  const [notifications, setNotification] = useState<Notification[]>([]);\n  const addNotification: NotificationsContextInterface[\"addNotification\"] = (notification: Notification) => {\n    setNotification((state) => [...state, notification]);\n  };\n\n  const removeNotificationAtIndex = (index: number) => {\n    setNotification([...notifications.slice(0, index), ...notifications.slice(index + 1)]);\n  };\n\n  React.useEffect(() => {\n    if (notifications.length > maxNotifications) {\n      removeNotificationAtIndex(0);\n    }\n  }, [notifications, maxNotifications]);\n\n  return (\n    <NotificationsContext.Provider\n      value={{\n        addNotification\n      }}\n    >\n      {notifications.map((notification: Notification, index: number) => {\n        const ref = React.createRef<HTMLDivElement>();\n        return (\n          <React.Fragment key={index}>\n            <Notification\n              id={`notification-${index}`}\n              ref={ref}\n              persist\n              toggle\n              theme={notification.theme}\n              onDismiss={() => removeNotificationAtIndex(index)}\n              onAnimationEnd={() => {\n                const multiplyer: number = 10;\n                (ref.current as HTMLDivElement).style.animation = `notificationAnimation 200ms ease-in-out`;\n                (ref.current as HTMLDivElement).style.bottom = `${index === 0 ? \"20px\" : (index + 2) * multiplyer}px`;\n              }}\n            >\n              <div className=\"notification-header\">{notification.message}</div>\n              <div className=\"notification-body\">{notification.description}</div>\n            </Notification>\n          </React.Fragment>\n        );\n      })}\n      {children}\n    </NotificationsContext.Provider>\n  );\n};\n\nexport const useNotificationsContext: () => UseNotificationsContext = () => {\n  const notificationContext = useContext(NotificationsContext);\n  return [notificationContext.addNotification];\n};\n\nexport default NotificationsProvider;\n","import React, { useState, useCallback, memo } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { AppRouteConfig } from \"../App\";\nimport { useLanguageContext } from \"../providers/LanguageProvider\";\n\ninterface SidebarProps {\n  routes: Array<AppRouteConfig>;\n  mobile: boolean;\n  searchable: boolean;\n}\n\nconst Sidebar: React.FC<SidebarProps> = ({ routes, mobile, searchable }: SidebarProps) => {\n  const [{ appName, routeNames }] = useLanguageContext();\n  const [open, setOpen] = useState(false);\n  const toggleClickMenu = useCallback(() => setOpen((state) => !state), []);\n\n  const Separator: React.FC<{ type: \"mb\" | \"mt\" | \"my\" }> = memo(({ type }) => <hr className={`m-0 ${type}-3`} />);\n\n  return (\n    <aside style={{ gridArea: \"aside\", zIndex: 1 }} className=\"bg-dark overflow-auto\">\n      <nav className=\"navbar navbar-dark bg-dark sidebar-header\">\n        <span className=\"navbar-brand\">{appName}</span>\n        {mobile ? (\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n            onClick={toggleClickMenu}\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n            {/* TODO: automatically close when anything else is clicked */}\n          </button>\n        ) : null}\n      </nav>\n\n      <div\n        className={`bg-dark ${mobile ? \"w-100\" : \"\"}`}\n        style={{\n          position: mobile ? \"absolute\" : \"relative\",\n          overflowY: \"auto\",\n          height: mobile && !open ? 0 : \"inherit\"\n        }}\n      >\n        <Separator type=\"mb\" />\n\n        {searchable && (\n          <section className=\"sidebar-nav px-3\">\n            <div>TODO: add search</div>\n          </section>\n        )}\n\n        <Separator type=\"my\" />\n\n        <section className=\"sidebar-nav\">\n          <ul className=\"nav my-0\">\n            {routes.map((item: AppRouteConfig) => (\n              <li key={item.path} className=\"nav-item text-center w-100\">\n                <NavLink\n                  className=\"nav-link text-light\"\n                  to={item.path}\n                  activeClassName=\"text-dark bg-secondary\"\n                  onClick={toggleClickMenu}\n                >\n                  {routeNames[item.title]}\n                </NavLink>\n              </li>\n            ))}\n          </ul>\n        </section>\n\n        <Separator type=\"my\" />\n      </div>\n    </aside>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst NoMatch: React.FC = () => {\n  const sidebarHeaderHeight: number = 56;\n\n  const rootContainerStyle: React.HTMLAttributes<HTMLDivElement>[\"style\"] = {\n    position: \"relative\",\n    display: \"grid\",\n    gridTemplateRows: `${sidebarHeaderHeight}px calc(100vh - ${sidebarHeaderHeight * 2}px) ${sidebarHeaderHeight}px`,\n    gridTemplateColumns: `auto`,\n    gridTemplateAreas: `\n        'header'\n        'main'\n        'footer'\n    `\n  };\n\n  const backgroundElementStyle: React.HTMLAttributes<HTMLSpanElement>[\"style\"] = {\n    position: \"fixed\",\n    width: 600,\n    top: 0,\n    right: 0,\n    height: 600,\n    backgroundPositionY: -180,\n    clipPath: \"polygon(0 0, 100% 0, 100% 90%, 20% 50%)\"\n  };\n\n  return (\n    <>\n      <span style={backgroundElementStyle} className=\"bg-warning-element\"></span>\n\n      <div style={rootContainerStyle}>\n        <nav style={{ gridArea: \"header\" }} className=\"navbar\">\n          <span className=\"navbar-brand\"></span>\n        </nav>\n        <main style={{ gridArea: \"main\", overflowY: \"auto\" }} className=\"d-flex align-items-center\">\n          <div className=\"container py-3\" style={{ maxHeight: \"100%\" }}>\n            <div className=\"row\">\n              <div className=\"col col-lg-8\">\n                <svg id=\"PIKTO_LIGHT\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 170 170\" width=\"6rem\">\n                  <path d=\"M85,101.5h-.6a1.5,1.5,0,0,1-.9-1.4V81.7H72.3a1.5,1.5,0,0,1-1.5-1.5V8a1.5,1.5,0,0,1,1.5-1.5H162A1.5,1.5,0,0,1,163.5,8V80.2a1.5,1.5,0,0,1-1.5,1.5H105.5L86.1,101.1A1.5,1.5,0,0,1,85,101.5ZM73.8,78.7H85a1.5,1.5,0,0,1,1.5,1.5V96.4l17.3-17.3a1.5,1.5,0,0,1,1.1-.4h55.7V9.5H73.8Z\" />\n                  <path d=\"M43.2,105.9a16,16,0,1,1,16-16A16,16,0,0,1,43.2,105.9Zm0-29a13,13,0,1,0,13,13A13,13,0,0,0,43.2,76.9Z\" />\n                  <path d=\"M50.7,118a16,16,0,0,1,16,16V165h-3V133.9a13,13,0,0,0-13-13h-15a13,13,0,0,0-13,13V165h-3V133.9a16,16,0,0,1,16-16Z\" />\n                </svg>\n                <h1>Seems Like the page you were looking for is not available.</h1>\n              </div>\n            </div>\n            <div className=\"row align-items-end\">\n              <div className=\"col-sm\">\n                <p className=\"text-muted\">Error code 404</p>\n                <hr />\n                <p>\n                  Something like this usually happens when you accidentally typed in a wrong url or we encountered\n                  something very unexpected\n                </p>\n                <hr />\n                <NavLink to={\"/\"}>Go back home</NavLink>\n              </div>\n              <div className=\"col-sm\">\n                <hr />\n                <button className=\"btn btn-link\">Option 2</button>\n              </div>\n              <div className=\"col-sm\">\n                <hr />\n                <button className=\"btn btn-link\">Option 3</button>\n              </div>\n            </div>\n          </div>\n        </main>\n        <nav style={{ gridArea: \"footer\" }} className=\"navbar\">\n          <p>© Skandinaviska Enskilda Banken AB</p>\n          <p>2019 01 30</p>\n        </nav>\n      </div>\n    </>\n  );\n};\n\nexport default NoMatch;\n","import React from \"react\";\nimport { useLanguageContext } from \"../providers/LanguageProvider\";\nimport { Button } from \"@sebgroup/react-components\";\n\nconst LanguageSwitcher: React.FC = () => {\n  const [, code, toggleCode] = useLanguageContext();\n  return (\n    <div className=\"m-3\" style={{ position: \"fixed\", right: 0, top: 0, zIndex: 1 }}>\n      <Button size=\"sm\" id=\"lang-switcher\" onClick={() => toggleCode()} theme=\"dark\">\n        {code === \"EN\" ? \"SW\" : \"EN\"}\n      </Button>\n    </div>\n  );\n};\n\nexport default LanguageSwitcher;\n","import React, { lazy, Suspense, useCallback, useMemo } from \"react\";\nimport \"./App.scss\";\nimport { useCommonMedia, DeviceType } from \"./utils/customHooks\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport { HeaderProps } from \"./components/Header\";\nimport Sidebar from \"./components/Sidebar\";\nimport Header from \"./components/Header\";\nimport NoMatch from \"./components/NoMatch\";\nimport LoaderProvider from \"./providers/LoaderProvider\";\nimport NotificationsProvider from \"./providers/NotificationsProvider\";\nimport LanguageProvider from \"./providers/LanguageProvider\";\nimport { WizardProvider } from \"./providers/WizardProvider\";\nimport LanguageSwitcher from \"./components/LanguageSwitcher\";\nimport { AppLanguage } from \"./models/language\";\n\nconst Home = lazy(() => import(\"./components/home/Home\"));\nconst Wizard = lazy(() => import(\"./components/wizard/Wizard\"));\nconst Components = lazy(() => import(\"./components/components/Components\"));\n\nexport interface AppRouteConfig {\n  path: string;\n  title: keyof AppLanguage[\"routeNames\"];\n  component: React.ReactNode;\n  theme?: HeaderProps[\"theme\"];\n}\n\nconst App: React.FC = () => {\n  const deviceSize: DeviceType = useCommonMedia();\n\n  const routes: Array<AppRouteConfig> = [\n    { path: \"/home\", title: \"home\", component: <Home />, theme: \"success\" },\n    { path: \"/wizard\", title: \"wizard\", component: <Wizard />, theme: \"warning\" },\n    // {\n    //   path: \"/components\",\n    //   title: \"components\",\n    //   component: <Components />\n    // },\n    {\n      path: \"/about\",\n      title: \"about\",\n      component: <Header d3=\"About\" lead=\"TODO: Add about section ....\" theme=\"info\" />\n    }\n  ];\n  const sidebarHeaderHeight: number = 56;\n\n  const gridAreas: () => string = useCallback(() => {\n    switch (deviceSize) {\n      case \"mobile\":\n      case \"landscape-mobile\":\n        return `\n          'aside aside aside'\n          'main main main'\n        `;\n      default:\n        return `\n          'aside main main'\n          'aside main main'\n        `;\n    }\n  }, [deviceSize]);\n\n  const gridTemplateColumns: () => string = useCallback(() => {\n    switch (deviceSize) {\n      case \"tablet\":\n        return \"200px auto auto\";\n      case \"desktop\":\n        return \"250px auto auto\";\n      case \"wide-desktop\":\n        return \"300px auto auto\";\n      default:\n        return \"auto auto auto\";\n    }\n  }, [deviceSize]);\n\n  const mobile: boolean = useMemo(() => deviceSize === \"mobile\" || deviceSize === \"landscape-mobile\", [deviceSize]);\n\n  const rootContainerStyle = {\n    display: \"grid\",\n    gridTemplateRows: `${sidebarHeaderHeight}px calc(100vh - ${sidebarHeaderHeight}px)`,\n    gridTemplateColumns: gridTemplateColumns(),\n    gridTemplateAreas: gridAreas()\n  };\n\n  const AppLoading: React.FC = () => (\n    <div className={\"root-container\"} style={rootContainerStyle}>\n      <Sidebar mobile={mobile} routes={[]} searchable={false} />\n      <main style={{ gridArea: \"main\", overflowY: \"auto\" }}>\n        <Header theme=\"secondary\" />\n        <div className=\"skeleton-loader\"></div>\n      </main>\n    </div>\n  );\n\n  return (\n    <LanguageProvider>\n      <WizardProvider>\n        <LanguageSwitcher />\n        <BrowserRouter basename={process.env.PUBLIC_URL || \"\"}>\n          <Switch>\n            <Route path=\"/nomatch\">\n              <NoMatch />\n            </Route>\n\n            <Route path=\"*\">\n              <LoaderProvider>\n                <NotificationsProvider>\n                  <Suspense fallback={<AppLoading />}>\n                    <div className={\"root-container bg-light\"} style={rootContainerStyle}>\n                      <Sidebar mobile={mobile} routes={routes} searchable />\n                      <main style={{ gridArea: \"main\", overflowY: \"auto\" }}>\n                        <Switch>\n                          {routes.map((route: AppRouteConfig, i: number) => {\n                            return (\n                              <Route key={i} path={route.path}>\n                                {route.component}\n                              </Route>\n                            );\n                          })}\n                          <Redirect from=\"/\" exact to={routes[0].path} />\n                          <Redirect from=\"*\" to={\"/nomatch\"} />\n                        </Switch>\n                      </main>\n                    </div>\n                  </Suspense>\n                </NotificationsProvider>\n              </LoaderProvider>\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      </WizardProvider>\n    </LanguageProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}